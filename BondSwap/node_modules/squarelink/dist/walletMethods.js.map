{"version":3,"file":"walletMethods.js","sourceRoot":"","sources":["../src/walletMethods.js"],"names":[],"mappings":"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","sourcesContent":["import { _popup, _serialize, _fetch } from './util'\nimport { SqlkError } from './error'\nimport { APP_URL, API_ENDPOINT, VERSION } from './config'\nimport bn from 'bignumber.js'\n\nexport const _callAPI = function(token, opts = {}) {\n  let scope = {'wallets:read': 1}\n  if (opts.scope && opts.scope.length) {\n    opts.scope.forEach(s => scope[s] = 1)\n  }\n  scope = Object.keys(scope).toString().replace(/ /g, '')\n  let promises = []\n  promises.push(_fetch(`${API_ENDPOINT}/wallets?access_token=${token}`).then(({ success, wallets }) => {\n    if (!success) throw new SqlkError(data.message || 'Issue fetching accounts, try again later')\n    else {\n      return Promise.resolve({\n        accounts: ([\n          wallets.find(w => w.default),\n          ...wallets.filter(w => !w.default)\n        ]).map(w => w.address)\n      })\n    }\n  }))\n  if (scope !== 'wallets:read') {\n    promises.push(_fetch(`${API_ENDPOINT}/user?access_token=${token}`).then(({ success, ...user }) => {\n      if (!success) throw new SqlkError(data.message || 'Issue fetching user info, try again later')\n      else {\n        return Promise.resolve({\n          securitySettings: {\n            has2fa: user.has_2fa,\n            hasRecovery: user.has_recovery,\n            emailVerified: user.email_verified\n          },\n          name: `${user.given_name} ${user.family_name}`,\n          email: user.email\n        })\n      }\n    }))\n  }\n  return Promise.all(promises).then(results => {\n    let result = {}\n    results.forEach(r => {\n      result = { ...result, ...r }\n    })\n    return Promise.resolve(result)\n  })\n}\n\n/**\n * Get a list of the users Ethereum accounts\n * @param {string} clientId\n * @param {object} opts\n */\nexport const _getAccounts = function(client_id, opts = {}) {\n  let scope = {'wallets:read': 1}\n  if (opts.scope && opts.scope.length) {\n    opts.scope.forEach(s => scope[s] = 1)\n  }\n  scope = Object.keys(scope).toString().replace(/ /g, '')\n  let url = `${APP_URL}/authorize?version=${VERSION}`\n  let params = {\n    version: VERSION,\n    client_id,\n    scope: `[${scope}]`,\n    response_type: 'token',\n    widget: true\n  }\n  return _popup({ url, params }).then(({ error, result }) => {\n    if (error) return Promise.reject(new SqlkError(error))\n    return _callAPI(result, opts)\n  })\n}\n\n/**\n * Request a signed message from a user\n * @param {string} client_id\n * @param {string} message\n * @param {string} method\n * @param {string} account\n */\nexport const _signMsg = async function ({ client_id, message, method, account }) {\n  let url = `${APP_URL}/msg?version=${VERSION}`\n  let params = {\n    client_id,\n    method,\n    version: VERSION,\n    account,\n  }\n  if (method === 'eth_signTypedData') {\n    params.params = message\n  } else if (method === 'eth_signTypedData_v3') {\n    params.paramsV3 = message\n  } else {\n    params.msg = message\n  }\n  return _popup({ url, params }).then(({ error, result }) => {\n    if (error) throw new SqlkError(error)\n    return Promise.resolve(result)\n  })\n}\n\n/**\n * Request a signed transaction from a user\n * @param {string} method\n * @param {string} client_id\n * @param {string} value\n * @param {string} to\n * @param {string} from\n * @param {string} gas\n * @param {string} gasPrice\n * @param {string} nonce\n * @param {string} network\n * @param {string} description\n * @param {string} state\n * @param {string} data\n */\nexport const _signTx = async function ({\n  method,\n  client_id,\n  value,\n  to,\n  from,\n  gas,\n  gasPrice,\n  nonce,\n  network,\n  description,\n  state,\n  data,\n}) {\n  if (!to) throw new SqlkError('You must provide a recipient `to` for the request')\n  let url = `${APP_URL}/tx?widget=true&version=${VERSION}`\n  let params = {\n    method,\n    client_id,\n    version: VERSION,\n    widget: true,\n    to,\n    from,\n    data,\n    state,\n    description,\n  }\n  if (value) params.value = new bn(value, 16).toString()\n  if (gas) params.gas = new bn(gas, 16).toString()\n  if (gasPrice) params.gasPrice = new bn(gasPrice, 16).toString()\n  if (nonce) params.nonce = new bn(nonce, 16).toString()\n  // set network\n  if (typeof network === 'object') {\n    params.network = 'custom'\n    params.rpc_url = network.url\n    if (network.chainId) params.chain_id = network.chainId\n  } else {\n    params.network = network\n  }\n  return _popup({ url, params }).then(({ error, result }) => {\n    if (error) throw new SqlkError(error)\n    return Promise.resolve(result)\n  })\n}\n"]}