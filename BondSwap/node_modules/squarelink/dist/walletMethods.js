"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var error_1 = require("./error");
var config_1 = require("./config");
var bignumber_js_1 = require("bignumber.js");
exports._callAPI = function (token, opts) {
    if (opts === void 0) { opts = {}; }
    var scope = { 'wallets:read': 1 };
    if (opts.scope && opts.scope.length) {
        opts.scope.forEach(function (s) { return scope[s] = 1; });
    }
    scope = Object.keys(scope).toString().replace(/ /g, '');
    var promises = [];
    promises.push(util_1._fetch(config_1.API_ENDPOINT + "/wallets?access_token=" + token).then(function (_a) {
        var success = _a.success, wallets = _a.wallets;
        if (!success)
            throw new error_1.SqlkError(data.message || 'Issue fetching accounts, try again later');
        else {
            return Promise.resolve({
                accounts: ([
                    wallets.find(function (w) { return w.default; })
                ].concat(wallets.filter(function (w) { return !w.default; }))).map(function (w) { return w.address; })
            });
        }
    }));
    if (scope !== 'wallets:read') {
        promises.push(util_1._fetch(config_1.API_ENDPOINT + "/user?access_token=" + token).then(function (_a) {
            var success = _a.success, user = __rest(_a, ["success"]);
            if (!success)
                throw new error_1.SqlkError(data.message || 'Issue fetching user info, try again later');
            else {
                return Promise.resolve({
                    securitySettings: {
                        has2fa: user.has_2fa,
                        hasRecovery: user.has_recovery,
                        emailVerified: user.email_verified
                    },
                    name: user.given_name + " " + user.family_name,
                    email: user.email
                });
            }
        }));
    }
    return Promise.all(promises).then(function (results) {
        var result = {};
        results.forEach(function (r) {
            result = __assign({}, result, r);
        });
        return Promise.resolve(result);
    });
};
/**
 * Get a list of the users Ethereum accounts
 * @param {string} clientId
 * @param {object} opts
 */
exports._getAccounts = function (client_id, opts) {
    if (opts === void 0) { opts = {}; }
    var scope = { 'wallets:read': 1 };
    if (opts.scope && opts.scope.length) {
        opts.scope.forEach(function (s) { return scope[s] = 1; });
    }
    scope = Object.keys(scope).toString().replace(/ /g, '');
    var url = config_1.APP_URL + "/authorize?version=" + config_1.VERSION;
    var params = {
        version: config_1.VERSION,
        client_id: client_id,
        scope: "[" + scope + "]",
        response_type: 'token',
        widget: true
    };
    return util_1._popup({ url: url, params: params }).then(function (_a) {
        var error = _a.error, result = _a.result;
        if (error)
            return Promise.reject(new error_1.SqlkError(error));
        return exports._callAPI(result, opts);
    });
};
/**
 * Request a signed message from a user
 * @param {string} client_id
 * @param {string} message
 * @param {string} method
 * @param {string} account
 */
exports._signMsg = function (_a) {
    var client_id = _a.client_id, message = _a.message, method = _a.method, account = _a.account;
    return __awaiter(this, void 0, void 0, function () {
        var url, params;
        return __generator(this, function (_b) {
            url = config_1.APP_URL + "/msg?version=" + config_1.VERSION;
            params = {
                client_id: client_id,
                method: method,
                version: config_1.VERSION,
                account: account,
            };
            if (method === 'eth_signTypedData') {
                params.params = message;
            }
            else if (method === 'eth_signTypedData_v3') {
                params.paramsV3 = message;
            }
            else {
                params.msg = message;
            }
            return [2 /*return*/, util_1._popup({ url: url, params: params }).then(function (_a) {
                    var error = _a.error, result = _a.result;
                    if (error)
                        throw new error_1.SqlkError(error);
                    return Promise.resolve(result);
                })];
        });
    });
};
/**
 * Request a signed transaction from a user
 * @param {string} method
 * @param {string} client_id
 * @param {string} value
 * @param {string} to
 * @param {string} from
 * @param {string} gas
 * @param {string} gasPrice
 * @param {string} nonce
 * @param {string} network
 * @param {string} description
 * @param {string} state
 * @param {string} data
 */
exports._signTx = function (_a) {
    var method = _a.method, client_id = _a.client_id, value = _a.value, to = _a.to, from = _a.from, gas = _a.gas, gasPrice = _a.gasPrice, nonce = _a.nonce, network = _a.network, description = _a.description, state = _a.state, data = _a.data;
    return __awaiter(this, void 0, void 0, function () {
        var url, params;
        return __generator(this, function (_b) {
            if (!to)
                throw new error_1.SqlkError('You must provide a recipient `to` for the request');
            url = config_1.APP_URL + "/tx?widget=true&version=" + config_1.VERSION;
            params = {
                method: method,
                client_id: client_id,
                version: config_1.VERSION,
                widget: true,
                to: to,
                from: from,
                data: data,
                state: state,
                description: description,
            };
            if (value)
                params.value = new bignumber_js_1.default(value, 16).toString();
            if (gas)
                params.gas = new bignumber_js_1.default(gas, 16).toString();
            if (gasPrice)
                params.gasPrice = new bignumber_js_1.default(gasPrice, 16).toString();
            if (nonce)
                params.nonce = new bignumber_js_1.default(nonce, 16).toString();
            // set network
            if (typeof network === 'object') {
                params.network = 'custom';
                params.rpc_url = network.url;
                if (network.chainId)
                    params.chain_id = network.chainId;
            }
            else {
                params.network = network;
            }
            return [2 /*return*/, util_1._popup({ url: url, params: params }).then(function (_a) {
                    var error = _a.error, result = _a.result;
                    if (error)
                        throw new error_1.SqlkError(error);
                    return Promise.resolve(result);
                })];
        });
    });
};
//# sourceMappingURL=walletMethods.js.map