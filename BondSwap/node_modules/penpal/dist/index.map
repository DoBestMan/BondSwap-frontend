{"version":3,"sources":["index.js"],"names":["HANDSHAKE","HANDSHAKE_REPLY","CALL","REPLY","FULFILLED","REJECTED","MESSAGE","DATA_CLONE_ERROR","ERR_CONNECTION_DESTROYED","ERR_CONNECTION_TIMEOUT","ERR_NOT_IN_IFRAME","DEFAULT_PORTS","URL_REGEX","Penpal","Promise","window","e","debug","generateId","id","log","args","console","getOriginFromUrl","url","location","document","regexResult","exec","protocol","hostname","port","portSuffix","DestructionPromise","executor","handlers","forEach","handler","then","push","serializeError","name","message","stack","deserializeError","obj","deserializedError","Error","Object","keys","key","connectCallSender","callSender","info","methodNames","destructionPromise","localName","local","remote","remoteOrigin","destroyed","createMethodProxy","methodName","error","code","resolve","reject","handleMessageEvent","event","source","origin","data","penpal","removeEventListener","returnValue","returnValueIsError","resolution","addEventListener","postMessage","reduce","api","connectCallReceiver","methods","createPromiseHandler","err","apply","connectToChild","appendTo","timeout","destroy","connectionDestructionPromise","resolveConnectionDestructionPromise","parent","iframe","createElement","body","appendChild","parentNode","removeChild","child","contentWindow","contentDocument","parentWindow","childOrigin","promise","resolveConnectionPromise","connectionTimeoutId","undefined","setTimeout","receiverMethodNames","destroyCallReceiver","handleMessage","callReceiverDestructionPromise","resolveCallReceiverDestructionPromise","receiverMethodName","clearTimeout","src","connectToParent","parentOrigin","top"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["const HANDSHAKE = 'handshake';\nconst HANDSHAKE_REPLY = 'handshake-reply';\nconst CALL = 'call';\nconst REPLY = 'reply';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\nconst MESSAGE = 'message';\nconst DATA_CLONE_ERROR = 'DataCloneError';\n\nexport const ERR_CONNECTION_DESTROYED = 'ConnectionDestroyed';\nexport const ERR_CONNECTION_TIMEOUT = 'ConnectionTimeout';\nexport const ERR_NOT_IN_IFRAME = 'NotInIframe';\n\nconst DEFAULT_PORTS = {\n  'http:': '80',\n  'https:': '443'\n};\n\nconst URL_REGEX = /^(https?:)?\\/\\/([^\\/:]+)(:(\\d+))?/;\n\nconst Penpal = {\n  ERR_CONNECTION_DESTROYED,\n  ERR_CONNECTION_TIMEOUT,\n  ERR_NOT_IN_IFRAME,\n\n  /**\n   * Promise implementation.\n   * @type {Constructor}\n   */\n  Promise: (() => {\n    try {\n      return window ? window.Promise : null;\n    } catch (e) {\n      return null;\n    }\n  })(),\n  /**\n   * Whether debug messages should be logged.\n   * @type {boolean}\n   */\n  debug: false\n};\n\n/**\n * @return {number} A unique ID (not universally unique)\n */\nconst generateId = (() => {\n  let id = 0;\n  return () => ++id;\n})();\n\n/**\n * Logs a message.\n * @param {...*} args One or more items to log\n */\nconst log = (...args) => {\n  if (Penpal.debug) {\n    console.log('[Penpal]', ...args); // eslint-disable-line no-console\n  }\n};\n\n/**\n * Converts a URL into an origin.\n * @param {string} url\n * @return {string} The URL's origin\n */\nconst getOriginFromUrl = (url) => {\n  const location = document.location;\n\n  const regexResult = URL_REGEX.exec(url);\n  let protocol;\n  let hostname;\n  let port;\n\n  if (regexResult) { // It's an absolute URL. Use the parsed info.\n    // regexResult[1] will be undefined if the URL starts with //\n    protocol = regexResult[1] ? regexResult[1] : location.protocol;\n    hostname = regexResult[2];\n    port = regexResult[4];\n  } else { // It's a relative path. Use the current location's info.\n    protocol = location.protocol;\n    hostname = location.hostname;\n    port = location.port;\n  }\n\n  // If the port is the default for the protocol, we don't want to add it to the origin string\n  // or it won't match the message's event.origin.\n  const portSuffix = (port && port !== DEFAULT_PORTS[protocol] ? `:${port}` : '');\n  return `${protocol}//${hostname}${portSuffix}`;\n};\n\n/**\n * A simplified promise class only used internally for when destroy() is called. This is\n * used to destroy connections synchronously while promises typically resolve asynchronously.\n *\n * @param {Function} executor\n * @returns {Object}\n * @constructor\n */\nconst DestructionPromise = (executor) => {\n  const handlers = [];\n\n  executor(() => {\n    handlers.forEach((handler) => {\n      handler();\n    });\n  });\n\n  return {\n    then(handler) {\n      handlers.push(handler);\n    }\n  };\n};\n\n/**\n * Converts an error object into a plain object.\n * @param {Error} Error object.\n * @returns {Object}\n */\nconst serializeError = ({ name, message, stack }) => ({ name, message, stack });\n\n/**\n * Converts a plain object into an error object.\n * @param {Object} Object with error properties.\n * @returns {Error}\n */\nconst deserializeError = (obj) => {\n  const deserializedError = new Error();\n  Object.keys(obj).forEach(key => deserializedError[key] = obj[key]);\n  return deserializedError;\n};\n\n/**\n * Augments an object with methods that match those defined by the remote. When these methods are\n * called, a \"call\" message will be sent to the remote, the remote's corresponding method will be\n * executed, and the method's return value will be returned via a message.\n * @param {Object} callSender Sender object that should be augmented with methods.\n * @param {Object} info Information about the local and remote windows.\n * @param {Array} methodNames Names of methods available to be called on the remote.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Object} The call sender object with methods that may be called.\n */\nconst connectCallSender = (callSender, info, methodNames, destructionPromise) => {\n  const { localName, local, remote, remoteOrigin } = info;\n  let destroyed = false;\n\n  log(`${localName}: Connecting call sender`);\n\n  const createMethodProxy = (methodName) => {\n    return (...args) => {\n      log(`${localName}: Sending ${methodName}() call`);\n\n      if (destroyed) {\n        const error = new Error(`Unable to send ${methodName}() call due ` +\n          `to destroyed connection`);\n        error.code = ERR_CONNECTION_DESTROYED;\n        throw error;\n      }\n\n      return new Penpal.Promise((resolve, reject) => {\n        const id = generateId();\n        const handleMessageEvent = (event) => {\n          if (event.source === remote &&\n              event.origin === remoteOrigin &&\n              event.data.penpal === REPLY &&\n              event.data.id === id) {\n            log(`${localName}: Received ${methodName}() reply`);\n            local.removeEventListener(MESSAGE, handleMessageEvent);\n\n            let returnValue = event.data.returnValue;\n\n            if (event.data.returnValueIsError) {\n              returnValue = deserializeError(returnValue);\n            }\n\n            (event.data.resolution === FULFILLED ? resolve : reject)(returnValue);\n          }\n        };\n\n        local.addEventListener(MESSAGE, handleMessageEvent);\n        remote.postMessage({\n          penpal: CALL,\n          id,\n          methodName,\n          args\n        }, remoteOrigin);\n      });\n    };\n  };\n\n  destructionPromise.then(() => {\n    destroyed = true;\n  });\n\n  methodNames.reduce((api, methodName) => {\n    api[methodName] = createMethodProxy(methodName);\n    return api;\n  }, callSender);\n};\n\n/**\n * Listens for \"call\" messages coming from the remote, executes the corresponding method, and\n * responds with the return value.\n * @param {Object} info Information about the local and remote windows.\n * @param {Object} methods The keys are the names of the methods that can be called by the remote\n * while the values are the method functions.\n * @param {Promise} destructionPromise A promise resolved when destroy() is called on the penpal\n * connection.\n * @returns {Function} A function that may be called to disconnect the receiver.\n */\nconst connectCallReceiver = (info, methods, destructionPromise) => {\n  const { localName, local, remote, remoteOrigin } = info;\n  let destroyed = false;\n\n  log(`${localName}: Connecting call receiver`);\n\n  const handleMessageEvent = (event) => {\n    if (event.source === remote &&\n        event.origin === remoteOrigin &&\n        event.data.penpal === CALL) {\n      const { methodName, args, id } = event.data;\n\n      log(`${localName}: Received ${methodName}() call`);\n\n      if (methodName in methods) {\n        const createPromiseHandler = (resolution) => {\n          return (returnValue) => {\n            log(`${localName}: Sending ${methodName}() reply`);\n\n            if (destroyed) {\n              // It's possible to throw an error here, but it would need to be thrown asynchronously\n              // and would only be catchable using window.onerror. This is because the consumer\n              // is merely returning a value from their method and not calling any function\n              // that they could wrap in a try-catch. Even if the consumer were to catch the error,\n              // the value of doing so is questionable. Instead, we'll just log a message.\n              log(`${localName}: Unable to send ${methodName}() reply due to destroyed connection`);\n              return;\n            }\n\n            const message = {\n              penpal: REPLY,\n              id,\n              resolution,\n              returnValue,\n            };\n\n            if (resolution === REJECTED && returnValue instanceof Error) {\n              message.returnValue = serializeError(returnValue);\n              message.returnValueIsError = true;\n            }\n\n            try {\n              remote.postMessage(message, remoteOrigin);\n            } catch (err) {\n              // If a consumer attempts to send an object that's not cloneable (e.g., window),\n              // we want to ensure the receiver's promise gets rejected.\n              if (err.name === DATA_CLONE_ERROR) {\n                remote.postMessage({\n                  penpal: REPLY,\n                  id,\n                  resolution: REJECTED,\n                  returnValue: serializeError(err),\n                  returnValueIsError: true\n                }, remoteOrigin);\n              }\n\n              throw err;\n            }\n          };\n        };\n\n        new Penpal.Promise(resolve => resolve(methods[methodName].apply(methods, args)))\n          .then(createPromiseHandler(FULFILLED), createPromiseHandler(REJECTED));\n      }\n    }\n  };\n\n  local.addEventListener(MESSAGE, handleMessageEvent);\n\n  destructionPromise.then(() => {\n    destroyed = true;\n    local.removeEventListener(MESSAGE, handleMessageEvent);\n  });\n};\n\n/**\n * @typedef {Object} Child\n * @property {Promise} promise A promise which will be resolved once a connection has\n * been established.\n * @property {HTMLIframeElement} iframe The created iframe element.\n * @property {Function} destroy A method that, when called, will remove the iframe element from\n * the DOM and clean up event listeners.\n */\n\n/**\n * Creates an iframe, loads a webpage into the URL, and attempts to establish communication with\n * the iframe.\n * @param {Object} options\n * @param {string} options.url The URL of the webpage that should be loaded into the created iframe.\n * @param {HTMLElement} [options.appendTo] The container to which the iframe should be appended.\n * @param {Object} [options.methods={}] Methods that may be called by the iframe.\n * @param {Number} [options.timeout] The amount of time, in milliseconds, Penpal should wait\n * for the child to respond before rejecting the connection promise.\n * @return {Child}\n */\nPenpal.connectToChild = ({ url, appendTo, methods = {}, timeout }) => {\n  let destroy;\n  const connectionDestructionPromise = new DestructionPromise(\n    (resolveConnectionDestructionPromise) => {\n      destroy = resolveConnectionDestructionPromise;\n    }\n  );\n\n  const parent = window;\n  const iframe = document.createElement('iframe');\n\n  (appendTo || document.body).appendChild(iframe);\n\n  connectionDestructionPromise.then(() => {\n    if (iframe.parentNode) {\n      iframe.parentNode.removeChild(iframe);\n    }\n  });\n\n  const child = iframe.contentWindow || iframe.contentDocument.parentWindow;\n  const childOrigin = getOriginFromUrl(url);\n  const promise = new Penpal.Promise((resolveConnectionPromise, reject) => {\n    let connectionTimeoutId;\n\n    if (timeout !== undefined) {\n      connectionTimeoutId = setTimeout(() => {\n        const error = new Error(`Connection to child timed out after ${timeout}ms`);\n        error.code = ERR_CONNECTION_TIMEOUT;\n        reject(error);\n        destroy();\n      }, timeout);\n    }\n\n    // We resolve the promise with the call sender. If the child reconnects (for example, after\n    // refreshing or navigating to another page that uses Penpal, we'll update the call sender\n    // with methods that match the latest provided by the child.\n    const callSender = {};\n    let receiverMethodNames;\n\n    let destroyCallReceiver;\n\n    const handleMessage = (event) => {\n      if (event.source === child &&\n          event.origin === childOrigin &&\n          event.data.penpal === HANDSHAKE) {\n        log('Parent: Received handshake, sending reply');\n\n        event.source.postMessage({\n          penpal: HANDSHAKE_REPLY,\n          methodNames: Object.keys(methods)\n        }, event.origin);\n\n        const info = {\n          localName: 'Parent',\n          local: parent,\n          remote: child,\n          remoteOrigin: event.origin\n        };\n\n        // If the child reconnected, we need to destroy the previous call receiver before setting\n        // up a new one.\n        if (destroyCallReceiver) {\n          destroyCallReceiver();\n        }\n\n        // When this promise is resolved, it will destroy the call receiver (stop listening to\n        // method calls from the child) and delete its methods off the call sender.\n        const callReceiverDestructionPromise = new DestructionPromise(\n          (resolveCallReceiverDestructionPromise) => {\n            connectionDestructionPromise.then(resolveCallReceiverDestructionPromise);\n            destroyCallReceiver = resolveCallReceiverDestructionPromise;\n          }\n        );\n\n        connectCallReceiver(info, methods, callReceiverDestructionPromise);\n\n        // If the child reconnected, we need to remove the methods from the previous call receiver\n        // off the sender.\n        if (receiverMethodNames) {\n          receiverMethodNames.forEach((receiverMethodName) => {\n            delete callSender[receiverMethodName];\n          });\n        }\n\n        receiverMethodNames = event.data.methodNames;\n        connectCallSender(callSender, info, receiverMethodNames, connectionDestructionPromise);\n        clearTimeout(connectionTimeoutId);\n        resolveConnectionPromise(callSender);\n      }\n    };\n\n    parent.addEventListener(MESSAGE, handleMessage);\n    connectionDestructionPromise.then(() => {\n      parent.removeEventListener(MESSAGE, handleMessage);\n\n      const error = new Error('Connection destroyed');\n      error.code = ERR_CONNECTION_DESTROYED;\n      reject(error);\n    });\n\n    log('Parent: Loading iframe');\n    iframe.src = url;\n  });\n\n  return {\n    promise,\n    iframe,\n    destroy\n  };\n};\n\n/**\n * @typedef {Object} Parent\n * @property {Promise} promise A promise which will be resolved once a connection has\n * been established.\n */\n\n/**\n * Attempts to establish communication with the parent window.\n * @param {Object} options\n * @param {string} [options.parentOrigin=*] Valid parent origin used to restrict communication.\n * @param {Object} [options.methods={}] Methods that may be called by the parent window.\n * @param {Number} [options.timeout] The amount of time, in milliseconds, Penpal should wait\n * for the parent to respond before rejecting the connection promise.\n * @return {Parent}\n */\nPenpal.connectToParent = ({ parentOrigin = '*', methods = {}, timeout } = {}) => {\n  if (window === window.top) {\n    const error = new Error('connectToParent() must be called within an iframe');\n    error.code = ERR_NOT_IN_IFRAME;\n    throw error;\n  }\n\n  let destroy;\n  const connectionDestructionPromise = new DestructionPromise(\n    (resolveConnectionDestructionPromise) => {\n      destroy = resolveConnectionDestructionPromise;\n    }\n  );\n\n  const child = window;\n  const parent = child.parent;\n\n  const promise = new Penpal.Promise((resolveConnectionPromise, reject) => {\n    let connectionTimeoutId;\n\n    if (timeout !== undefined) {\n      connectionTimeoutId = setTimeout(() => {\n        const error = new Error(`Connection to parent timed out after ${timeout}ms`);\n        error.code = ERR_CONNECTION_TIMEOUT;\n        reject(error);\n        destroy();\n      }, timeout);\n    }\n\n    const handleMessageEvent = (event) => {\n      if ((parentOrigin === '*' ||\n          parentOrigin === event.origin) &&\n          event.source === parent &&\n          event.data.penpal === HANDSHAKE_REPLY) {\n        log('Child: Received handshake reply');\n\n        child.removeEventListener(MESSAGE, handleMessageEvent);\n\n        const info = {\n          localName: 'Child',\n          local: child,\n          remote: parent,\n          remoteOrigin: event.origin\n        };\n\n        const callSender = {};\n\n        connectCallReceiver(info, methods, connectionDestructionPromise);\n        connectCallSender(callSender, info, event.data.methodNames, connectionDestructionPromise)\n        clearTimeout(connectionTimeoutId);\n        resolveConnectionPromise(callSender);\n      }\n    };\n\n    child.addEventListener(MESSAGE, handleMessageEvent);\n\n    connectionDestructionPromise.then(() => {\n      child.removeEventListener(MESSAGE, handleMessageEvent);\n\n      const error = new Error('Connection destroyed');\n      error.code = ERR_CONNECTION_DESTROYED;\n      reject(error);\n    });\n\n    log('Child: Sending handshake');\n\n    parent.postMessage({\n      penpal: HANDSHAKE,\n      methodNames: Object.keys(methods),\n    }, parentOrigin);\n  });\n\n  return {\n    promise,\n    destroy\n  };\n};\n\nexport default Penpal;\n"]}