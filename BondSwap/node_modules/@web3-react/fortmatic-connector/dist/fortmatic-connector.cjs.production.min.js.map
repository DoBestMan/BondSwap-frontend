{"version":3,"file":"fortmatic-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainIdToNetwork","apiKey","chainId","Object","keys","includes","toString","invariant","supportedChainIds","activate","_this3","fortmatic","getProvider","enable","then","accounts","account","provider","this","m","Fortmatic","undefined","getChainId","getAccount","send","deactivate","close","_this11","user","logout","emitDeactivate","AbstractConnector"],"mappings":"8IAIMA,EAAkD,GACnD,YACA,YACA,aACC,4EAcUC,IAAAA,OAAQC,IAAAA,eACVC,OAAOC,KAAKJ,GAAkBK,SAASH,EAAQI,aAAzDC,qBACM,CAAEC,kBAAmB,CAACN,YAEvBD,OAASA,IACTC,QAAUA,sHAGJO,gEASWC,EAAKC,UACxBC,cACAC,SACAC,MAAK,SAACC,UAA+BA,EAAS,sBAH3CC,SAKC,CAAEC,SAAUP,EAAKC,UAAUC,cAAeV,QAASQ,EAAKR,QAASc,QAAAA,SAbnEE,sBAAAR,EAAKC,iCACgB,8QAAO,kBAAaG,MAAK,SAAAK,+BAAKA,SAAAA,aAAcA,qBAA9DC,KACDT,UAAY,IAAIS,EACnBV,EAAKT,OACY,IAAjBS,EAAKR,SAAkC,IAAjBQ,EAAKR,aAAgBmB,EAAYrB,EAAiBU,EAAKR,sGAYtEU,kDACJM,KAAKP,UAAUC,qDAGXU,iDACJJ,KAAKhB,+CAGDqB,iDACJL,KAAKP,UACTC,cACAY,KAAK,gBACLV,MAAK,SAACC,UAA+BA,EAAS,6CAG5CU,WAAA,eAEMC,2BACLR,4BAAAS,EAAKhB,UAAUiB,KAAKC,6BACrBC,2DAlD+BC"}