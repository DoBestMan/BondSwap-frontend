{"version":3,"file":"fortmatic-connector.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","keys","includes","toString","invariant","supportedChainIds","activate","fortmatic","getProvider","enable","then","accounts","account","provider","m","Fortmatic","undefined","getChainId","getAccount","send","deactivate","close","user","logout","emitDeactivate","AbstractConnector"],"mappings":";;;;;;;;;AAIA,IAAMA,gBAAgB,GAAkC;AACtD,KAAG,SADmD;AAEtD,KAAG,SAFmD;AAGtD,KAAG,SAHmD;AAItD,MAAI;AAJkD,CAAxD;IAYaC,kBAAb;AAAA;;AAME;;;QAAcC,cAAAA;QAAQC,eAAAA;AACpB,KAAUC,MAAM,CAACC,IAAP,CAAYL,gBAAZ,EAA8BM,QAA9B,CAAuCH,OAAO,CAACI,QAAR,EAAvC,CAAV,2CAAAC,SAAS,iCAAoFL,OAApF,CAAT,GAAAK,SAAS,OAAT;AACA,0CAAM;AAAEC,MAAAA,iBAAiB,EAAE,CAACN,OAAD;AAArB,KAAN;AAEA,UAAKD,MAAL,GAAcA,MAAd;AACA,UAAKC,OAAL,GAAeA,OAAf;;AACD;;AAZH;;AAAA,SAceO,QAdf;AAAA;;+BAuB0B,OAAKC,SAAL,CACnBC,WADmB,GAEnBC,MAFmB,GAGnBC,IAHmB,CAGd,UAACC,QAAD;AAAA,iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,SAHc,kBAAhBC;AAKN,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,OAAKN,SAAL,CAAeC,WAAf,EAAZ;AAA0CT,YAAAA,OAAO,EAAE,OAAKA,OAAxD;AAAiEa,YAAAA,OAAO,EAAPA;AAAjE,WAAP;;;;mBAbK;;;YAAD,CAAC,OAAKL;iCACgB,OAAO,WAAP,EAAoBG,IAApB,CAAyB,UAAAI,CAAC;AAAA;;AAAA,iCAAIA,CAAJ,oBAAIA,CAAC,WAAL,yBAAkBA,CAAlB;AAAA,WAA1B,kBAAlBC;AACN,mBAAKR,SAAL,GAAiB,IAAIQ,SAAJ,CACf,OAAKjB,MADU,EAEf,OAAKC,OAAL,KAAiB,CAAjB,IAAsB,OAAKA,OAAL,KAAiB,CAAvC,GAA2CiB,SAA3C,GAAuDpB,gBAAgB,CAAC,OAAKG,OAAN,CAFxD,CAAjB;;;;;;AAYH,KA7BH;AAAA;AAAA;AAAA;;AAAA,SA+BeS,WA/Bf;AAAA;mBAgCW;;AAAP,6BAAO,OAAKD,SAAL,CAAeC,WAAf,EAAP;AACD,KAjCH;AAAA;AAAA;AAAA;;AAAA,SAmCeS,UAnCf;AAAA;mBAoCW;;AAAP,6BAAO,OAAKlB,OAAZ;AACD,KArCH;AAAA;AAAA;AAAA;;AAAA,SAuCemB,UAvCf;AAAA;mBAwCW;;AAAP,6BAAO,OAAKX,SAAL,CACJC,WADI,GAEJW,IAFI,CAEC,cAFD,EAGJT,IAHI,CAGC,UAACC,QAAD;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,OAHD,CAAP;AAID,KA5CH;AAAA;AAAA;AAAA;;AAAA,SA8CSS,UA9CT,GA8CS,wBA9CT;;AAAA,SAgDeC,KAhDf;AAAA;oBAiDU;;6BAAA,QAAKd,SAAL,CAAee,IAAf,CAAoBC,MAApB;AACN,gBAAKC,cAAL;;AACD,KAnDH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAwCC,iBAAxC;;;;"}