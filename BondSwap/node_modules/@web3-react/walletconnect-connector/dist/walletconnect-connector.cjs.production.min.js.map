{"version":3,"file":"walletconnect-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\ninterface WalletConnectConnectorArguments {\n  rpc: { [chainId: number]: string }\n  bridge?: string\n  qrcode?: boolean\n  pollingInterval?: number\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly rpc: { [chainId: number]: string }\n  private readonly bridge?: string\n  private readonly qrcode?: boolean\n  private readonly pollingInterval?: number\n\n  public walletConnectProvider?: any\n\n  constructor({ rpc, bridge, qrcode, pollingInterval }: WalletConnectConnectorArguments) {\n    invariant(Object.keys(rpc).length === 1, '@walletconnect/web3-provider is broken with >1 chainId, please use 1')\n    super({ supportedChainIds: Object.keys(rpc).map(k => Number(k)) })\n\n    this.rpc = rpc\n    this.bridge = bridge\n    this.qrcode = qrcode\n    this.pollingInterval = pollingInterval\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider({\n        bridge: this.bridge,\n        rpc: this.rpc,\n        qrcode: this.qrcode,\n        pollingInterval: this.pollingInterval\n      })\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({ chainId: Number(Object.keys(this.rpc)[0]) })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"],"names":["UserRejectedRequestError","name","_this","constructor","message","Error","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","Object","keys","length","invariant","supportedChainIds","map","k","Number","handleChainChanged","_this2","bind","handleAccountsChanged","handleDisconnect","chainId","emitUpdate","accounts","account","emitDeactivate","this","walletConnectProvider","stop","removeListener","undefined","activate","_this4","enable","then","error","on","provider","wc","connected","createSession","emit","uri","m","WalletConnectProvider","getProvider","getChainId","send","getAccount","deactivate","close","_this12$walletConnect","AbstractConnector"],"mappings":"69CAMaA,8DAGJC,KAAOC,EAAKC,YAAYF,OACxBG,QAAU,sDAJ2BC,QAejCC,kCAQGC,IAAAA,IAAKC,IAAAA,OAAQC,IAAAA,OAAQC,IAAAA,uBACK,IAA5BC,OAAOC,KAAKL,GAAKM,QAA3BC,qBACM,CAAEC,kBAAmBJ,OAAOC,KAAKL,GAAKS,KAAI,SAAAC,UAAKC,OAAOD,eAEvDV,IAAMA,IACNC,OAASA,IACTC,OAASA,IACTC,gBAAkBA,IAElBS,mBAAqBC,EAAKD,mBAAmBE,aAC7CC,sBAAwBF,EAAKE,sBAAsBD,aACnDE,iBAAmBH,EAAKG,iBAAiBF,+CAGxCF,mBAAA,SAAmBK,QAIpBC,WAAW,CAAED,QAAAA,OAGZF,sBAAA,SAAsBI,QAIvBD,WAAW,CAAEE,QAASD,EAAS,QAG9BH,iBAAA,gBAIDK,iBAEDC,KAAKC,6BACFA,sBAAsBC,YACtBD,sBAAsBE,eAAe,eAAgBH,KAAKV,yBAC1DW,sBAAsBE,eAAe,kBAAmBH,KAAKP,4BAC7DQ,2BAAwBG,QAG1BL,oBAGMM,8BACNL,sDAgBiBM,EAAKL,sBACxBM,SACAC,MAAK,SAACX,UAA+BA,EAAS,aACxC,SAACY,MAEgB,sBAAlBA,EAAMlC,cACF,IAAIJ,QAGNsC,qBATJX,YAYDG,sBAAsBS,GAAG,aAAcJ,EAAKZ,oBAC5CO,sBAAsBS,GAAG,eAAgBJ,EAAKhB,sBAC9CW,sBAAsBS,GAAG,kBAAmBJ,EAAKb,uBAE/C,CAAEkB,SAAUL,EAAKL,sBAAuBH,QAAAA,2BArB1CQ,EAAKL,sBAAsBW,GAAGC,iCAC3BP,EAAKL,sBAAsBW,GAAGE,cAAc,CAAEnB,QAASN,OAAOP,OAAOC,KAAKuB,EAAK5B,KAAK,0BACrFqC,KAnFkB,gBAmFET,EAAKL,sBAAsBW,GAAGI,4DAbpDV,EAAKL,6CAC4B,8QAAO,qCAAgCO,MAAK,SAAAS,+BAAKA,SAAAA,aAAcA,qBAA7FC,KACDjB,sBAAwB,IAAIiB,EAAsB,CACrDvC,OAAQ2B,EAAK3B,OACbD,IAAK4B,EAAK5B,IACVE,OAAQ0B,EAAK1B,OACbC,gBAAiByB,EAAKzB,8GA6BfsC,kDACJnB,KAAKC,6DAGDmB,iDACJpB,KAAKC,sBAAsBoB,KAAK,sDAG5BC,iDACJtB,KAAKC,sBAAsBoB,KAAK,gBAAgBb,MAAK,SAACX,UAA+BA,EAAS,6CAGhG0B,WAAA,WACDvB,KAAKC,6BACFA,sBAAsBC,YACtBD,sBAAsBE,eAAe,aAAcH,KAAKN,uBACxDO,sBAAsBE,eAAe,eAAgBH,KAAKV,yBAC1DW,sBAAsBE,eAAe,kBAAmBH,KAAKP,2BAIzD+B,2DACLxB,KAAKC,8BAALwB,EAA4BD,qEA9GME,2CAjBf"}