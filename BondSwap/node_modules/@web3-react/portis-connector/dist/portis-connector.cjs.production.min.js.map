{"version":3,"file":"portis-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainIdToNetwork","dAppId","networks","config","chainIds","map","n","Number","chainId","every","c","invariant","supportedChainIds","handleOnLogout","_this","bind","handleOnActiveWalletChanged","handleOnError","emitDeactivate","account","emitUpdate","error","emitError","activate","this","portis","onLogout","_this3","onActiveWalletChanged","onError","provider","enable","then","accounts","m","Portis","getProvider","getChainId","send","getAccount","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","close","_this13","logout","AbstractConnector"],"mappings":"qWAIA,IAAMA,EAAkD,GACnD,YACA,YACA,YACA,YACC,YACC,UACD,YACA,mBACA,UACA,WACA,YACD,WACE,iBACD,yBACC,mBACA,aACE,gFAkBOC,IAAAA,OAAQC,IAAAA,aAAUC,OAAAA,aAAS,KACjCC,EAAWF,EAASG,KAAI,SAACC,SAA4B,iBAANA,EAAiBA,EAAIC,OAAOD,EAAEE,mBAEjFJ,EAASK,OAAM,SAACC,WAAiBV,EAAiBU,OADpDC,qBAIM,CAAEC,kBAAmBR,WAEtBH,OAASA,IACTC,SAAWA,IACXC,OAASA,IAETU,eAAiBC,EAAKD,eAAeE,aACrCC,4BAA8BF,EAAKE,4BAA4BD,aAC/DE,cAAgBH,EAAKG,cAAcF,wHAGlCF,eAAA,gBAIDK,oBAGCF,4BAAA,SAA4BG,QAI7BC,WAAW,CAAED,QAAAA,OAGZF,cAAA,SAAcI,QAIfC,UAAUD,MAGJE,8BACNC,2BASAC,OAAOC,SAASC,EAAKd,kBACrBY,OAAOG,sBAAsBD,EAAKX,+BAClCS,OAAOI,QAAQF,EAAKV,+BAEHU,EAAKF,OAAOK,SAASC,SAASC,MAAK,SAACC,UAA+BA,EAAS,sBAA5Fd,SAEC,CAAEW,SAAUH,EAAKF,OAAOK,SAAUX,QAAAA,wBAfpCQ,EAAKF,8BACa,8QAAO,qBAAgBO,MAAK,SAAAE,+BAAKA,SAAAA,aAAcA,qBAA9DC,KACDV,OAAS,IAAIU,EAChBR,EAAK1B,OACuB,iBAArB0B,EAAKzB,SAAS,GAAkBF,EAAiB2B,EAAKzB,SAAS,IAAOyB,EAAKzB,SAAS,GAC3FyB,EAAKxB,oGAaEiC,kDACJZ,KAAKC,OAAOK,gDAGRO,iDACJb,KAAKC,OAAOK,SAASQ,KAAK,sDAGtBC,iDACJf,KAAKC,OAAOK,SAASQ,KAAK,gBAAgBN,MAAK,SAACC,UAA+BA,EAAS,6CAG1FO,WAAA,gBACAf,OAAOC,UAAS,oBAChBD,OAAOG,uBAAsB,oBAC7BH,OAAOI,SAAQ,kBAGTY,uBAAcC,EAA8BC,aAC7B,iBAAfD,GACG1C,EAAiB0C,IAA7B/B,MACAa,KAAKC,OAAOgB,cAAczC,EAAiB0C,GAAaC,GAAxDnB,KACKJ,WAAW,CAAEZ,QAASkC,MAD3BlB,KAGKC,OAAOgB,cAAcC,EAAYC,GAHtCnB,KAIKJ,WAAW,CAAEZ,QAASD,OAAOmC,EAAWlC,oEAIpCoC,2BACLpB,4BAAAqB,EAAKpB,OAAOqB,6BACb5B,2DA/F4B6B"}