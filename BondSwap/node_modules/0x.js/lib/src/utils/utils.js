"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0xproject/utils");
var BN = require("bn.js");
var ethABI = require("ethereumjs-abi");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var types_1 = require("../types");
exports.utils = {
    /**
     * Converts BigNumber instance to BN
     * The only reason we convert to BN is to remain compatible with `ethABI. soliditySHA3` that
     * expects values of Solidity type `uint` to be passed as type `BN`.
     * We do not use BN anywhere else in the codebase.
     */
    bigNumberToBN: function (value) {
        return new BN(value.toString(), 10);
    },
    consoleLog: function (message) {
        // tslint:disable-next-line: no-console
        console.log(message);
    },
    isParityNode: function (nodeVersion) {
        return _.includes(nodeVersion, 'Parity');
    },
    isTestRpc: function (nodeVersion) {
        return _.includes(nodeVersion, 'TestRPC');
    },
    spawnSwitchErr: function (name, value) {
        return new Error("Unexpected switch value: " + value + " encountered for " + name);
    },
    getOrderHashHex: function (order) {
        var orderParts = [
            { value: order.exchangeContractAddress, type: types_1.SolidityTypes.Address },
            { value: order.maker, type: types_1.SolidityTypes.Address },
            { value: order.taker, type: types_1.SolidityTypes.Address },
            { value: order.makerTokenAddress, type: types_1.SolidityTypes.Address },
            { value: order.takerTokenAddress, type: types_1.SolidityTypes.Address },
            { value: order.feeRecipient, type: types_1.SolidityTypes.Address },
            {
                value: exports.utils.bigNumberToBN(order.makerTokenAmount),
                type: types_1.SolidityTypes.Uint256,
            },
            {
                value: exports.utils.bigNumberToBN(order.takerTokenAmount),
                type: types_1.SolidityTypes.Uint256,
            },
            {
                value: exports.utils.bigNumberToBN(order.makerFee),
                type: types_1.SolidityTypes.Uint256,
            },
            {
                value: exports.utils.bigNumberToBN(order.takerFee),
                type: types_1.SolidityTypes.Uint256,
            },
            {
                value: exports.utils.bigNumberToBN(order.expirationUnixTimestampSec),
                type: types_1.SolidityTypes.Uint256,
            },
            { value: exports.utils.bigNumberToBN(order.salt), type: types_1.SolidityTypes.Uint256 },
        ];
        var types = _.map(orderParts, function (o) { return o.type; });
        var values = _.map(orderParts, function (o) { return o.value; });
        var hashBuff = ethABI.soliditySHA3(types, values);
        var hashHex = ethUtil.bufferToHex(hashBuff);
        return hashHex;
    },
    getCurrentUnixTimestampSec: function () {
        return new utils_1.BigNumber(Date.now() / 1000).round();
    },
    getCurrentUnixTimestampMs: function () {
        return new utils_1.BigNumber(Date.now());
    },
};
//# sourceMappingURL=utils.js.map