"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0xproject/utils");
var _0x_1 = require("../0x");
var remaining_fillable_calculator_1 = require("../order_watcher/remaining_fillable_calculator");
var types_1 = require("../types");
var ACCEPTABLE_RELATIVE_ROUNDING_ERROR = 0.0001;
var OrderStateUtils = /** @class */ (function () {
    function OrderStateUtils(balanceAndProxyAllowanceLazyStore, orderFilledCancelledLazyStore) {
        this._balanceAndProxyAllowanceLazyStore = balanceAndProxyAllowanceLazyStore;
        this._orderFilledCancelledLazyStore = orderFilledCancelledLazyStore;
    }
    OrderStateUtils._validateIfOrderIsValid = function (signedOrder, orderRelevantState) {
        var unavailableTakerTokenAmount = orderRelevantState.cancelledTakerTokenAmount.add(orderRelevantState.filledTakerTokenAmount);
        var availableTakerTokenAmount = signedOrder.takerTokenAmount.minus(unavailableTakerTokenAmount);
        if (availableTakerTokenAmount.eq(0)) {
            throw new Error(types_1.ExchangeContractErrs.OrderRemainingFillAmountZero);
        }
        if (orderRelevantState.makerBalance.eq(0)) {
            throw new Error(types_1.ExchangeContractErrs.InsufficientMakerBalance);
        }
        if (orderRelevantState.makerProxyAllowance.eq(0)) {
            throw new Error(types_1.ExchangeContractErrs.InsufficientMakerAllowance);
        }
        if (!signedOrder.makerFee.eq(0)) {
            if (orderRelevantState.makerFeeBalance.eq(0)) {
                throw new Error(types_1.ExchangeContractErrs.InsufficientMakerFeeBalance);
            }
            if (orderRelevantState.makerFeeProxyAllowance.eq(0)) {
                throw new Error(types_1.ExchangeContractErrs.InsufficientMakerFeeAllowance);
            }
        }
        var minFillableTakerTokenAmountWithinNoRoundingErrorRange = signedOrder.takerTokenAmount
            .dividedBy(ACCEPTABLE_RELATIVE_ROUNDING_ERROR)
            .dividedBy(signedOrder.makerTokenAmount);
        if (orderRelevantState.remainingFillableTakerTokenAmount.lessThan(minFillableTakerTokenAmountWithinNoRoundingErrorRange)) {
            throw new Error(types_1.ExchangeContractErrs.OrderFillRoundingError);
        }
    };
    OrderStateUtils.prototype.getOrderStateAsync = function (signedOrder) {
        return __awaiter(this, void 0, void 0, function () {
            var orderRelevantState, orderHash, orderState, orderState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderRelevantStateAsync(signedOrder)];
                    case 1:
                        orderRelevantState = _a.sent();
                        orderHash = _0x_1.ZeroEx.getOrderHashHex(signedOrder);
                        try {
                            OrderStateUtils._validateIfOrderIsValid(signedOrder, orderRelevantState);
                            orderState = {
                                isValid: true,
                                orderHash: orderHash,
                                orderRelevantState: orderRelevantState,
                            };
                            return [2 /*return*/, orderState];
                        }
                        catch (err) {
                            orderState = {
                                isValid: false,
                                orderHash: orderHash,
                                error: err.message,
                            };
                            return [2 /*return*/, orderState];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OrderStateUtils.prototype.getOrderRelevantStateAsync = function (signedOrder) {
        return __awaiter(this, void 0, void 0, function () {
            var exchange, zrxTokenAddress, orderHash, makerBalance, makerProxyAllowance, makerFeeBalance, makerFeeProxyAllowance, filledTakerTokenAmount, cancelledTakerTokenAmount, unavailableTakerTokenAmount, totalMakerTokenAmount, totalTakerTokenAmount, remainingTakerTokenAmount, remainingMakerTokenAmount, transferrableMakerTokenAmount, transferrableFeeTokenAmount, isMakerTokenZRX, remainingFillableCalculator, remainingFillableMakerTokenAmount, remainingFillableTakerTokenAmount, orderRelevantState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        exchange = this._orderFilledCancelledLazyStore._exchange;
                        zrxTokenAddress = exchange.getZRXTokenAddress();
                        orderHash = _0x_1.ZeroEx.getOrderHashHex(signedOrder);
                        return [4 /*yield*/, this._balanceAndProxyAllowanceLazyStore.getBalanceAsync(signedOrder.makerTokenAddress, signedOrder.maker)];
                    case 1:
                        makerBalance = _a.sent();
                        return [4 /*yield*/, this._balanceAndProxyAllowanceLazyStore.getProxyAllowanceAsync(signedOrder.makerTokenAddress, signedOrder.maker)];
                    case 2:
                        makerProxyAllowance = _a.sent();
                        return [4 /*yield*/, this._balanceAndProxyAllowanceLazyStore.getBalanceAsync(zrxTokenAddress, signedOrder.maker)];
                    case 3:
                        makerFeeBalance = _a.sent();
                        return [4 /*yield*/, this._balanceAndProxyAllowanceLazyStore.getProxyAllowanceAsync(zrxTokenAddress, signedOrder.maker)];
                    case 4:
                        makerFeeProxyAllowance = _a.sent();
                        return [4 /*yield*/, this._orderFilledCancelledLazyStore.getFilledTakerAmountAsync(orderHash)];
                    case 5:
                        filledTakerTokenAmount = _a.sent();
                        return [4 /*yield*/, this._orderFilledCancelledLazyStore.getCancelledTakerAmountAsync(orderHash)];
                    case 6:
                        cancelledTakerTokenAmount = _a.sent();
                        return [4 /*yield*/, exchange.getUnavailableTakerAmountAsync(orderHash)];
                    case 7:
                        unavailableTakerTokenAmount = _a.sent();
                        totalMakerTokenAmount = signedOrder.makerTokenAmount;
                        totalTakerTokenAmount = signedOrder.takerTokenAmount;
                        remainingTakerTokenAmount = totalTakerTokenAmount.minus(unavailableTakerTokenAmount);
                        remainingMakerTokenAmount = remainingTakerTokenAmount
                            .times(totalMakerTokenAmount)
                            .dividedToIntegerBy(totalTakerTokenAmount);
                        transferrableMakerTokenAmount = utils_1.BigNumber.min([makerProxyAllowance, makerBalance]);
                        transferrableFeeTokenAmount = utils_1.BigNumber.min([makerFeeProxyAllowance, makerFeeBalance]);
                        isMakerTokenZRX = signedOrder.makerTokenAddress === zrxTokenAddress;
                        remainingFillableCalculator = new remaining_fillable_calculator_1.RemainingFillableCalculator(signedOrder, isMakerTokenZRX, transferrableMakerTokenAmount, transferrableFeeTokenAmount, remainingMakerTokenAmount);
                        remainingFillableMakerTokenAmount = remainingFillableCalculator.computeRemainingMakerFillable();
                        remainingFillableTakerTokenAmount = remainingFillableCalculator.computeRemainingTakerFillable();
                        orderRelevantState = {
                            makerBalance: makerBalance,
                            makerProxyAllowance: makerProxyAllowance,
                            makerFeeBalance: makerFeeBalance,
                            makerFeeProxyAllowance: makerFeeProxyAllowance,
                            filledTakerTokenAmount: filledTakerTokenAmount,
                            cancelledTakerTokenAmount: cancelledTakerTokenAmount,
                            remainingFillableMakerTokenAmount: remainingFillableMakerTokenAmount,
                            remainingFillableTakerTokenAmount: remainingFillableTakerTokenAmount,
                        };
                        return [2 /*return*/, orderRelevantState];
                }
            });
        });
    };
    return OrderStateUtils;
}());
exports.OrderStateUtils = OrderStateUtils;
//# sourceMappingURL=order_state_utils.js.map