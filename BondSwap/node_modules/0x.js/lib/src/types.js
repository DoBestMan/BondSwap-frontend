"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ZeroExError;
(function (ZeroExError) {
    ZeroExError["ExchangeContractDoesNotExist"] = "EXCHANGE_CONTRACT_DOES_NOT_EXIST";
    ZeroExError["ZRXContractDoesNotExist"] = "ZRX_CONTRACT_DOES_NOT_EXIST";
    ZeroExError["EtherTokenContractDoesNotExist"] = "ETHER_TOKEN_CONTRACT_DOES_NOT_EXIST";
    ZeroExError["TokenTransferProxyContractDoesNotExist"] = "TOKEN_TRANSFER_PROXY_CONTRACT_DOES_NOT_EXIST";
    ZeroExError["TokenRegistryContractDoesNotExist"] = "TOKEN_REGISTRY_CONTRACT_DOES_NOT_EXIST";
    ZeroExError["TokenContractDoesNotExist"] = "TOKEN_CONTRACT_DOES_NOT_EXIST";
    ZeroExError["UnhandledError"] = "UNHANDLED_ERROR";
    ZeroExError["UserHasNoAssociatedAddress"] = "USER_HAS_NO_ASSOCIATED_ADDRESSES";
    ZeroExError["InvalidSignature"] = "INVALID_SIGNATURE";
    ZeroExError["ContractNotDeployedOnNetwork"] = "CONTRACT_NOT_DEPLOYED_ON_NETWORK";
    ZeroExError["InsufficientAllowanceForTransfer"] = "INSUFFICIENT_ALLOWANCE_FOR_TRANSFER";
    ZeroExError["InsufficientBalanceForTransfer"] = "INSUFFICIENT_BALANCE_FOR_TRANSFER";
    ZeroExError["InsufficientEthBalanceForDeposit"] = "INSUFFICIENT_ETH_BALANCE_FOR_DEPOSIT";
    ZeroExError["InsufficientWEthBalanceForWithdrawal"] = "INSUFFICIENT_WETH_BALANCE_FOR_WITHDRAWAL";
    ZeroExError["InvalidJump"] = "INVALID_JUMP";
    ZeroExError["OutOfGas"] = "OUT_OF_GAS";
    ZeroExError["NoNetworkId"] = "NO_NETWORK_ID";
    ZeroExError["SubscriptionNotFound"] = "SUBSCRIPTION_NOT_FOUND";
    ZeroExError["SubscriptionAlreadyPresent"] = "SUBSCRIPTION_ALREADY_PRESENT";
    ZeroExError["TransactionMiningTimeout"] = "TRANSACTION_MINING_TIMEOUT";
})(ZeroExError = exports.ZeroExError || (exports.ZeroExError = {}));
var InternalZeroExError;
(function (InternalZeroExError) {
    InternalZeroExError["NoAbiDecoder"] = "NO_ABI_DECODER";
    InternalZeroExError["ZrxNotInTokenRegistry"] = "ZRX_NOT_IN_TOKEN_REGISTRY";
    InternalZeroExError["WethNotInTokenRegistry"] = "WETH_NOT_IN_TOKEN_REGISTRY";
})(InternalZeroExError = exports.InternalZeroExError || (exports.InternalZeroExError = {}));
var SolidityTypes;
(function (SolidityTypes) {
    SolidityTypes["Address"] = "address";
    SolidityTypes["Uint256"] = "uint256";
    SolidityTypes["Uint8"] = "uint8";
    SolidityTypes["Uint"] = "uint";
})(SolidityTypes = exports.SolidityTypes || (exports.SolidityTypes = {}));
var ExchangeContractErrCodes;
(function (ExchangeContractErrCodes) {
    ExchangeContractErrCodes[ExchangeContractErrCodes["ERROR_FILL_EXPIRED"] = 0] = "ERROR_FILL_EXPIRED";
    ExchangeContractErrCodes[ExchangeContractErrCodes["ERROR_FILL_NO_VALUE"] = 1] = "ERROR_FILL_NO_VALUE";
    ExchangeContractErrCodes[ExchangeContractErrCodes["ERROR_FILL_TRUNCATION"] = 2] = "ERROR_FILL_TRUNCATION";
    ExchangeContractErrCodes[ExchangeContractErrCodes["ERROR_FILL_BALANCE_ALLOWANCE"] = 3] = "ERROR_FILL_BALANCE_ALLOWANCE";
    ExchangeContractErrCodes[ExchangeContractErrCodes["ERROR_CANCEL_EXPIRED"] = 4] = "ERROR_CANCEL_EXPIRED";
    ExchangeContractErrCodes[ExchangeContractErrCodes["ERROR_CANCEL_NO_VALUE"] = 5] = "ERROR_CANCEL_NO_VALUE";
})(ExchangeContractErrCodes = exports.ExchangeContractErrCodes || (exports.ExchangeContractErrCodes = {}));
var ExchangeContractErrs;
(function (ExchangeContractErrs) {
    ExchangeContractErrs["OrderFillExpired"] = "ORDER_FILL_EXPIRED";
    ExchangeContractErrs["OrderCancelExpired"] = "ORDER_CANCEL_EXPIRED";
    ExchangeContractErrs["OrderCancelAmountZero"] = "ORDER_CANCEL_AMOUNT_ZERO";
    ExchangeContractErrs["OrderAlreadyCancelledOrFilled"] = "ORDER_ALREADY_CANCELLED_OR_FILLED";
    ExchangeContractErrs["OrderFillAmountZero"] = "ORDER_FILL_AMOUNT_ZERO";
    ExchangeContractErrs["OrderRemainingFillAmountZero"] = "ORDER_REMAINING_FILL_AMOUNT_ZERO";
    ExchangeContractErrs["OrderFillRoundingError"] = "ORDER_FILL_ROUNDING_ERROR";
    ExchangeContractErrs["FillBalanceAllowanceError"] = "FILL_BALANCE_ALLOWANCE_ERROR";
    ExchangeContractErrs["InsufficientTakerBalance"] = "INSUFFICIENT_TAKER_BALANCE";
    ExchangeContractErrs["InsufficientTakerAllowance"] = "INSUFFICIENT_TAKER_ALLOWANCE";
    ExchangeContractErrs["InsufficientMakerBalance"] = "INSUFFICIENT_MAKER_BALANCE";
    ExchangeContractErrs["InsufficientMakerAllowance"] = "INSUFFICIENT_MAKER_ALLOWANCE";
    ExchangeContractErrs["InsufficientTakerFeeBalance"] = "INSUFFICIENT_TAKER_FEE_BALANCE";
    ExchangeContractErrs["InsufficientTakerFeeAllowance"] = "INSUFFICIENT_TAKER_FEE_ALLOWANCE";
    ExchangeContractErrs["InsufficientMakerFeeBalance"] = "INSUFFICIENT_MAKER_FEE_BALANCE";
    ExchangeContractErrs["InsufficientMakerFeeAllowance"] = "INSUFFICIENT_MAKER_FEE_ALLOWANCE";
    ExchangeContractErrs["TransactionSenderIsNotFillOrderTaker"] = "TRANSACTION_SENDER_IS_NOT_FILL_ORDER_TAKER";
    ExchangeContractErrs["MultipleMakersInSingleCancelBatchDisallowed"] = "MULTIPLE_MAKERS_IN_SINGLE_CANCEL_BATCH_DISALLOWED";
    ExchangeContractErrs["InsufficientRemainingFillAmount"] = "INSUFFICIENT_REMAINING_FILL_AMOUNT";
    ExchangeContractErrs["MultipleTakerTokensInFillUpToDisallowed"] = "MULTIPLE_TAKER_TOKENS_IN_FILL_UP_TO_DISALLOWED";
    ExchangeContractErrs["BatchOrdersMustHaveSameExchangeAddress"] = "BATCH_ORDERS_MUST_HAVE_SAME_EXCHANGE_ADDRESS";
    ExchangeContractErrs["BatchOrdersMustHaveAtLeastOneItem"] = "BATCH_ORDERS_MUST_HAVE_AT_LEAST_ONE_ITEM";
})(ExchangeContractErrs = exports.ExchangeContractErrs || (exports.ExchangeContractErrs = {}));
var ExchangeEvents;
(function (ExchangeEvents) {
    ExchangeEvents["LogFill"] = "LogFill";
    ExchangeEvents["LogCancel"] = "LogCancel";
    ExchangeEvents["LogError"] = "LogError";
})(ExchangeEvents = exports.ExchangeEvents || (exports.ExchangeEvents = {}));
var TokenEvents;
(function (TokenEvents) {
    TokenEvents["Transfer"] = "Transfer";
    TokenEvents["Approval"] = "Approval";
})(TokenEvents = exports.TokenEvents || (exports.TokenEvents = {}));
var EtherTokenEvents;
(function (EtherTokenEvents) {
    EtherTokenEvents["Transfer"] = "Transfer";
    EtherTokenEvents["Approval"] = "Approval";
    EtherTokenEvents["Deposit"] = "Deposit";
    EtherTokenEvents["Withdrawal"] = "Withdrawal";
})(EtherTokenEvents = exports.EtherTokenEvents || (exports.EtherTokenEvents = {}));
// Earliest is omitted by design. It is simply an alias for the `0` constant and
// is thus not very helpful. Moreover, this type is used in places that only accept
// `latest` or `pending`.
var BlockParamLiteral;
(function (BlockParamLiteral) {
    BlockParamLiteral["Latest"] = "latest";
    BlockParamLiteral["Pending"] = "pending";
})(BlockParamLiteral = exports.BlockParamLiteral || (exports.BlockParamLiteral = {}));
var AbiType;
(function (AbiType) {
    AbiType["Function"] = "function";
    AbiType["Constructor"] = "constructor";
    AbiType["Event"] = "event";
    AbiType["Fallback"] = "fallback";
})(AbiType = exports.AbiType || (exports.AbiType = {}));
var TradeSide;
(function (TradeSide) {
    TradeSide["Maker"] = "maker";
    TradeSide["Taker"] = "taker";
})(TradeSide = exports.TradeSide || (exports.TradeSide = {}));
var TransferType;
(function (TransferType) {
    TransferType["Trade"] = "trade";
    TransferType["Fee"] = "fee";
})(TransferType = exports.TransferType || (exports.TransferType = {}));
// tslint:disable:max-file-line-count
//# sourceMappingURL=types.js.map