/**
 * This file is auto-generated using abi-gen. Don't edit directly.
 * Templates can be found at https://github.com/0xProject/0x.js/tree/development/packages/abi-gen-templates.
 */
import { TxData } from '@0xproject/types';
import { BigNumber } from '@0xproject/utils';
import * as Web3 from 'web3';
import { BaseContract } from './base_contract';
export declare class ExchangeContract extends BaseContract {
    isRoundingError: {
        callAsync(numerator: BigNumber, denominator: BigNumber, target: BigNumber, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<boolean>;
    };
    filled: {
        callAsync(index: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    cancelled: {
        callAsync(index: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    fillOrdersUpTo: {
        sendTransactionAsync(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmount: BigNumber, shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): Promise<string>;
        estimateGasAsync(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmount: BigNumber, shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmount: BigNumber, shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): string;
    };
    cancelOrder: {
        sendTransactionAsync(orderAddresses: string[], orderValues: BigNumber[], cancelTakerTokenAmount: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(orderAddresses: string[], orderValues: BigNumber[], cancelTakerTokenAmount: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(orderAddresses: string[], orderValues: BigNumber[], cancelTakerTokenAmount: BigNumber, txData?: TxData): string;
    };
    ZRX_TOKEN_CONTRACT: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    batchFillOrKillOrders: {
        sendTransactionAsync(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmounts: BigNumber[], v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): Promise<string>;
        estimateGasAsync(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmounts: BigNumber[], v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmounts: BigNumber[], v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): string;
    };
    fillOrKillOrder: {
        sendTransactionAsync(orderAddresses: string[], orderValues: BigNumber[], fillTakerTokenAmount: BigNumber, v: number | BigNumber, r: string, s: string, txData?: TxData): Promise<string>;
        estimateGasAsync(orderAddresses: string[], orderValues: BigNumber[], fillTakerTokenAmount: BigNumber, v: number | BigNumber, r: string, s: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(orderAddresses: string[], orderValues: BigNumber[], fillTakerTokenAmount: BigNumber, v: number | BigNumber, r: string, s: string, txData?: TxData): string;
    };
    getUnavailableTakerTokenAmount: {
        callAsync(orderHash: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    isValidSignature: {
        callAsync(signer: string, hash: string, v: number | BigNumber, r: string, s: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<boolean>;
    };
    getPartialAmount: {
        callAsync(numerator: BigNumber, denominator: BigNumber, target: BigNumber, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    TOKEN_TRANSFER_PROXY_CONTRACT: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    batchFillOrders: {
        sendTransactionAsync(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmounts: BigNumber[], shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): Promise<string>;
        estimateGasAsync(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmounts: BigNumber[], shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(orderAddresses: string[][], orderValues: BigNumber[][], fillTakerTokenAmounts: BigNumber[], shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: (number | BigNumber)[], r: string[], s: string[], txData?: TxData): string;
    };
    batchCancelOrders: {
        sendTransactionAsync(orderAddresses: string[][], orderValues: BigNumber[][], cancelTakerTokenAmounts: BigNumber[], txData?: TxData): Promise<string>;
        estimateGasAsync(orderAddresses: string[][], orderValues: BigNumber[][], cancelTakerTokenAmounts: BigNumber[], txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(orderAddresses: string[][], orderValues: BigNumber[][], cancelTakerTokenAmounts: BigNumber[], txData?: TxData): string;
    };
    fillOrder: {
        sendTransactionAsync(orderAddresses: string[], orderValues: BigNumber[], fillTakerTokenAmount: BigNumber, shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: number | BigNumber, r: string, s: string, txData?: TxData): Promise<string>;
        estimateGasAsync(orderAddresses: string[], orderValues: BigNumber[], fillTakerTokenAmount: BigNumber, shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: number | BigNumber, r: string, s: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(orderAddresses: string[], orderValues: BigNumber[], fillTakerTokenAmount: BigNumber, shouldThrowOnInsufficientBalanceOrAllowance: boolean, v: number | BigNumber, r: string, s: string, txData?: TxData): string;
    };
    getOrderHash: {
        callAsync(orderAddresses: string[], orderValues: BigNumber[], defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    EXTERNAL_QUERY_GAS_LIMIT: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    VERSION: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    constructor(web3ContractInstance: Web3.ContractInstance, defaults: Partial<TxData>);
}
