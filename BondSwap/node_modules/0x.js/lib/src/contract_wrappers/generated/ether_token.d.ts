/**
 * This file is auto-generated using abi-gen. Don't edit directly.
 * Templates can be found at https://github.com/0xProject/0x.js/tree/development/packages/abi-gen-templates.
 */
import { TxData, TxDataPayable } from '@0xproject/types';
import { BigNumber } from '@0xproject/utils';
import * as Web3 from 'web3';
import { BaseContract } from './base_contract';
export declare class EtherTokenContract extends BaseContract {
    name: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    approve: {
        sendTransactionAsync(_spender: string, _value: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(_spender: string, _value: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_spender: string, _value: BigNumber, txData?: TxData): string;
    };
    totalSupply: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    transferFrom: {
        sendTransactionAsync(_from: string, _to: string, _value: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(_from: string, _to: string, _value: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_from: string, _to: string, _value: BigNumber, txData?: TxData): string;
    };
    withdraw: {
        sendTransactionAsync(amount: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(amount: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(amount: BigNumber, txData?: TxData): string;
    };
    decimals: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    balanceOf: {
        callAsync(_owner: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    symbol: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    transfer: {
        sendTransactionAsync(_to: string, _value: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(_to: string, _value: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_to: string, _value: BigNumber, txData?: TxData): string;
    };
    deposit: {
        sendTransactionAsync(txData?: TxDataPayable): Promise<string>;
        estimateGasAsync(txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(txData?: TxData): string;
    };
    allowance: {
        callAsync(_owner: string, _spender: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<BigNumber>;
    };
    constructor(web3ContractInstance: Web3.ContractInstance, defaults: Partial<TxData>);
}
