/**
 * This file is auto-generated using abi-gen. Don't edit directly.
 * Templates can be found at https://github.com/0xProject/0x.js/tree/development/packages/abi-gen-templates.
 */
import { TxData } from '@0xproject/types';
import { BigNumber } from '@0xproject/utils';
import * as Web3 from 'web3';
import { BaseContract } from './base_contract';
export declare class TokenRegistryContract extends BaseContract {
    removeToken: {
        sendTransactionAsync(_token: string, _index: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _index: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _index: BigNumber, txData?: TxData): string;
    };
    getTokenAddressByName: {
        callAsync(_name: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    getTokenAddressBySymbol: {
        callAsync(_symbol: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    setTokenSwarmHash: {
        sendTransactionAsync(_token: string, _swarmHash: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _swarmHash: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _swarmHash: string, txData?: TxData): string;
    };
    getTokenMetaData: {
        callAsync(_token: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, BigNumber, string, string]>;
    };
    owner: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    addToken: {
        sendTransactionAsync(_token: string, _name: string, _symbol: string, _decimals: number | BigNumber, _ipfsHash: string, _swarmHash: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _name: string, _symbol: string, _decimals: number | BigNumber, _ipfsHash: string, _swarmHash: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _name: string, _symbol: string, _decimals: number | BigNumber, _ipfsHash: string, _swarmHash: string, txData?: TxData): string;
    };
    setTokenName: {
        sendTransactionAsync(_token: string, _name: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _name: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _name: string, txData?: TxData): string;
    };
    tokens: {
        callAsync(index: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, BigNumber, string, string]>;
    };
    tokenAddresses: {
        callAsync(index: BigNumber, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    getTokenByName: {
        callAsync(_name: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, BigNumber, string, string]>;
    };
    getTokenAddresses: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string[]>;
    };
    setTokenIpfsHash: {
        sendTransactionAsync(_token: string, _ipfsHash: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _ipfsHash: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _ipfsHash: string, txData?: TxData): string;
    };
    getTokenBySymbol: {
        callAsync(_symbol: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, BigNumber, string, string]>;
    };
    setTokenSymbol: {
        sendTransactionAsync(_token: string, _symbol: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _symbol: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _symbol: string, txData?: TxData): string;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: TxData): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: TxData): string;
    };
    constructor(web3ContractInstance: Web3.ContractInstance, defaults: Partial<TxData>);
}
