import { Web3Wrapper } from '@0xproject/web3-wrapper';
import { ExchangeWrapper } from '../contract_wrappers/exchange_wrapper';
import { TokenWrapper } from '../contract_wrappers/token_wrapper';
import { OnOrderStateChangeCallback, OrderStateWatcherConfig, SignedOrder } from '../types';
import { AbiDecoder } from '../utils/abi_decoder';
/**
 * This class includes all the functionality related to watching a set of orders
 * for potential changes in order validity/fillability. The orderWatcher notifies
 * the subscriber of these changes so that a final decison can be made on whether
 * the order should be deemed invalid.
 */
export declare class OrderStateWatcher {
    private _orderStateByOrderHashCache;
    private _orderByOrderHash;
    private _dependentOrderHashes;
    private _callbackIfExists?;
    private _eventWatcher;
    private _web3Wrapper;
    private _abiDecoder;
    private _expirationWatcher;
    private _orderStateUtils;
    private _orderFilledCancelledLazyStore;
    private _balanceAndProxyAllowanceLazyStore;
    private _cleanupJobInterval;
    private _cleanupJobIntervalIdIfExists?;
    constructor(web3Wrapper: Web3Wrapper, abiDecoder: AbiDecoder, token: TokenWrapper, exchange: ExchangeWrapper, config?: OrderStateWatcherConfig);
    /**
     * Add an order to the orderStateWatcher. Before the order is added, it's
     * signature is verified.
     * @param   signedOrder     The order you wish to start watching.
     */
    addOrder(signedOrder: SignedOrder): void;
    /**
     * Removes an order from the orderStateWatcher
     * @param   orderHash     The orderHash of the order you wish to stop watching.
     */
    removeOrder(orderHash: string): void;
    /**
     * Starts an orderStateWatcher subscription. The callback will be called every time a watched order's
     * backing blockchain state has changed. This is a call-to-action for the caller to re-validate the order.
     * @param   callback            Receives the orderHash of the order that should be re-validated, together
     *                              with all the order-relevant blockchain state needed to re-validate the order.
     */
    subscribe(callback: OnOrderStateChangeCallback): void;
    /**
     * Ends an orderStateWatcher subscription.
     */
    unsubscribe(): void;
    private _cleanupAsync();
    private _cleanupOrderRelatedState(orderHash);
    private _onOrderExpired(orderHash);
    private _onEventWatcherCallbackAsync(log);
    private _emitRevalidateOrdersAsync(orderHashes);
    private _addToDependentOrderHashes(signedOrder, orderHash);
    private _removeFromDependentOrderHashes(makerAddress, tokenAddress, orderHash);
    private _getZRXTokenAddress();
}
