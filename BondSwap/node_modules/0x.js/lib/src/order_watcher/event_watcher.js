"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0xproject/utils");
var _ = require("lodash");
var types_1 = require("../types");
var assert_1 = require("../utils/assert");
var DEFAULT_EVENT_POLLING_INTERVAL_MS = 200;
var LogEventState;
(function (LogEventState) {
    LogEventState[LogEventState["Removed"] = 0] = "Removed";
    LogEventState[LogEventState["Added"] = 1] = "Added";
})(LogEventState || (LogEventState = {}));
/*
 * The EventWatcher watches for blockchain events at the specified block confirmation
 * depth.
 */
var EventWatcher = /** @class */ (function () {
    function EventWatcher(web3Wrapper, pollingIntervalIfExistsMs) {
        this._lastEvents = [];
        this._web3Wrapper = web3Wrapper;
        this._pollingIntervalMs = _.isUndefined(pollingIntervalIfExistsMs)
            ? DEFAULT_EVENT_POLLING_INTERVAL_MS
            : pollingIntervalIfExistsMs;
    }
    EventWatcher.prototype.subscribe = function (callback) {
        assert_1.assert.isFunction('callback', callback);
        if (!_.isUndefined(this._intervalIdIfExists)) {
            throw new Error(types_1.ZeroExError.SubscriptionAlreadyPresent);
        }
        this._intervalIdIfExists = utils_1.intervalUtils.setAsyncExcludingInterval(this._pollForBlockchainEventsAsync.bind(this, callback), this._pollingIntervalMs);
    };
    EventWatcher.prototype.unsubscribe = function () {
        this._lastEvents = [];
        if (!_.isUndefined(this._intervalIdIfExists)) {
            utils_1.intervalUtils.clearAsyncExcludingInterval(this._intervalIdIfExists);
            delete this._intervalIdIfExists;
        }
    };
    EventWatcher.prototype._pollForBlockchainEventsAsync = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var pendingEvents, removedEvents, newEvents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getEventsAsync()];
                    case 1:
                        pendingEvents = _a.sent();
                        if (pendingEvents.length === 0) {
                            // HACK: Sometimes when node rebuilds the pending block we get back the empty result.
                            // We don't want to emit a lot of removal events and bring them back after a couple of miliseconds,
                            // that's why we just ignore those cases.
                            return [2 /*return*/];
                        }
                        removedEvents = _.differenceBy(this._lastEvents, pendingEvents, JSON.stringify);
                        newEvents = _.differenceBy(pendingEvents, this._lastEvents, JSON.stringify);
                        return [4 /*yield*/, this._emitDifferencesAsync(removedEvents, LogEventState.Removed, callback)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this._emitDifferencesAsync(newEvents, LogEventState.Added, callback)];
                    case 3:
                        _a.sent();
                        this._lastEvents = pendingEvents;
                        return [2 /*return*/];
                }
            });
        });
    };
    EventWatcher.prototype._getEventsAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var eventFilter, events;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eventFilter = {
                            fromBlock: types_1.BlockParamLiteral.Pending,
                            toBlock: types_1.BlockParamLiteral.Pending,
                        };
                        return [4 /*yield*/, this._web3Wrapper.getLogsAsync(eventFilter)];
                    case 1:
                        events = _a.sent();
                        return [2 /*return*/, events];
                }
            });
        });
    };
    EventWatcher.prototype._emitDifferencesAsync = function (logs, logEventState, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, logs_1, log, logEvent;
            return __generator(this, function (_a) {
                for (_i = 0, logs_1 = logs; _i < logs_1.length; _i++) {
                    log = logs_1[_i];
                    logEvent = __assign({ removed: logEventState === LogEventState.Removed }, log);
                    if (!_.isUndefined(this._intervalIdIfExists)) {
                        callback(logEvent);
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    return EventWatcher;
}());
exports.EventWatcher = EventWatcher;
//# sourceMappingURL=event_watcher.js.map