"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var web3_wrapper_1 = require("@0xproject/web3-wrapper");
var chai = require("chai");
var _ = require("lodash");
require("mocha");
var Sinon = require("sinon");
var event_watcher_1 = require("../src/order_watcher/event_watcher");
var chai_setup_1 = require("./utils/chai_setup");
var web3_factory_1 = require("./utils/web3_factory");
chai_setup_1.chaiSetup.configure();
var expect = chai.expect;
describe('EventWatcher', function () {
    var web3;
    var stubs = [];
    var eventWatcher;
    var web3Wrapper;
    var logA = {
        address: '0x71d271f8b14adef568f8f28f1587ce7271ac4ca5',
        blockHash: null,
        blockNumber: null,
        data: '',
        logIndex: null,
        topics: [],
        transactionHash: '0x004881d38cd4a8f72f1a0d68c8b9b8124504706041ff37019c1d1ed6bfda8e17',
        transactionIndex: 0,
    };
    var logB = {
        address: '0x8d12a197cb00d4747a1fe03395095ce2a5cc6819',
        blockHash: null,
        blockNumber: null,
        data: '',
        logIndex: null,
        topics: ['0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567'],
        transactionHash: '0x01ef3c048b18d9b09ea195b4ed94cf8dd5f3d857a1905ff886b152cfb1166f25',
        transactionIndex: 0,
    };
    var logC = {
        address: '0x1d271f8b174adef58f1587ce68f8f27271ac4ca5',
        blockHash: null,
        blockNumber: null,
        data: '',
        logIndex: null,
        topics: ['0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567'],
        transactionHash: '0x01ef3c048b18d9b09ea195b4ed94cf8dd5f3d857a1905ff886b152cfb1166f25',
        transactionIndex: 0,
    };
    before(function () { return __awaiter(_this, void 0, void 0, function () {
        var pollingIntervalMs;
        return __generator(this, function (_a) {
            web3 = web3_factory_1.web3Factory.create();
            pollingIntervalMs = 10;
            web3Wrapper = new web3_wrapper_1.Web3Wrapper(web3.currentProvider);
            eventWatcher = new event_watcher_1.EventWatcher(web3Wrapper, pollingIntervalMs);
            return [2 /*return*/];
        });
    }); });
    afterEach(function () {
        // clean up any stubs after the test has completed
        _.each(stubs, function (s) { return s.restore(); });
        stubs = [];
        eventWatcher.unsubscribe();
    });
    it('correctly emits initial log events', function (done) {
        var logs = [logA, logB];
        var expectedLogEvents = [
            __assign({ removed: false }, logA),
            __assign({ removed: false }, logB),
        ];
        var getLogsStub = Sinon.stub(web3Wrapper, 'getLogsAsync');
        getLogsStub.onCall(0).returns(logs);
        stubs.push(getLogsStub);
        var callback = function (event) {
            var expectedLogEvent = expectedLogEvents.shift();
            expect(event).to.be.deep.equal(expectedLogEvent);
            if (_.isEmpty(expectedLogEvents)) {
                done();
            }
        };
        eventWatcher.subscribe(callback);
    });
    it('correctly computes the difference and emits only changes', function (done) {
        var initialLogs = [logA, logB];
        var changedLogs = [logA, logC];
        var expectedLogEvents = [
            __assign({ removed: false }, logA),
            __assign({ removed: false }, logB),
            __assign({ removed: true }, logB),
            __assign({ removed: false }, logC),
        ];
        var getLogsStub = Sinon.stub(web3Wrapper, 'getLogsAsync');
        getLogsStub.onCall(0).returns(initialLogs);
        getLogsStub.onCall(1).returns(changedLogs);
        stubs.push(getLogsStub);
        var callback = function (event) {
            var expectedLogEvent = expectedLogEvents.shift();
            expect(event).to.be.deep.equal(expectedLogEvent);
            if (_.isEmpty(expectedLogEvents)) {
                done();
            }
        };
        eventWatcher.subscribe(callback);
    });
});
//# sourceMappingURL=event_watcher_test.js.map