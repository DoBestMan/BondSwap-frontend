import { BigNumber } from '@0xproject/utils';
import { SignedOrder, Token, ZeroEx } from '../../src';
export declare class FillScenarios {
    private _zeroEx;
    private _userAddresses;
    private _tokens;
    private _coinbase;
    private _zrxTokenAddress;
    private _exchangeContractAddress;
    constructor(zeroEx: ZeroEx, userAddresses: string[], tokens: Token[], zrxTokenAddress: string, exchangeContractAddress: string);
    initTokenBalancesAsync(): Promise<void>;
    createFillableSignedOrderAsync(makerTokenAddress: string, takerTokenAddress: string, makerAddress: string, takerAddress: string, fillableAmount: BigNumber, expirationUnixTimestampSec?: BigNumber): Promise<SignedOrder>;
    createFillableSignedOrderWithFeesAsync(makerTokenAddress: string, takerTokenAddress: string, makerFee: BigNumber, takerFee: BigNumber, makerAddress: string, takerAddress: string, fillableAmount: BigNumber, feeRecepient: string, expirationUnixTimestampSec?: BigNumber): Promise<SignedOrder>;
    createAsymmetricFillableSignedOrderAsync(makerTokenAddress: string, takerTokenAddress: string, makerAddress: string, takerAddress: string, makerFillableAmount: BigNumber, takerFillableAmount: BigNumber, expirationUnixTimestampSec?: BigNumber): Promise<SignedOrder>;
    createPartiallyFilledSignedOrderAsync(makerTokenAddress: string, takerTokenAddress: string, takerAddress: string, fillableAmount: BigNumber, partialFillAmount: BigNumber): Promise<SignedOrder>;
    private _createAsymmetricFillableSignedOrderWithFeesAsync(makerTokenAddress, takerTokenAddress, makerFee, takerFee, makerAddress, takerAddress, makerFillableAmount, takerFillableAmount, feeRecepient, expirationUnixTimestampSec?);
    private _increaseBalanceAndAllowanceAsync(tokenAddress, address, amount);
    private _increaseBalanceAsync(tokenAddress, address, amount);
    private _increaseAllowanceAsync(tokenAddress, address, amount);
}
