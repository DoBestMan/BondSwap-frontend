"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var dev_utils_1 = require("@0xproject/dev-utils");
var utils_1 = require("@0xproject/utils");
var chai = require("chai");
var _ = require("lodash");
require("mocha");
var Sinon = require("sinon");
var _0x_1 = require("../src/0x");
var expiration_watcher_1 = require("../src/order_watcher/expiration_watcher");
var constants_1 = require("../src/utils/constants");
var utils_2 = require("../src/utils/utils");
var chai_setup_1 = require("./utils/chai_setup");
var constants_2 = require("./utils/constants");
var fill_scenarios_1 = require("./utils/fill_scenarios");
var report_callback_errors_1 = require("./utils/report_callback_errors");
var token_utils_1 = require("./utils/token_utils");
var web3_factory_1 = require("./utils/web3_factory");
chai_setup_1.chaiSetup.configure();
var expect = chai.expect;
var blockchainLifecycle = new dev_utils_1.BlockchainLifecycle(constants_2.constants.RPC_URL);
describe('ExpirationWatcher', function () {
    var web3;
    var zeroEx;
    var tokenUtils;
    var tokens;
    var userAddresses;
    var zrxTokenAddress;
    var fillScenarios;
    var exchangeContractAddress;
    var makerTokenAddress;
    var takerTokenAddress;
    var coinbase;
    var makerAddress;
    var takerAddress;
    var feeRecipient;
    var fillableAmount = new utils_1.BigNumber(5);
    var currentUnixTimestampSec;
    var timer;
    var expirationWatcher;
    before(function () { return __awaiter(_this, void 0, void 0, function () {
        var config, _a, makerToken, takerToken;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    web3 = web3_factory_1.web3Factory.create();
                    config = {
                        networkId: constants_1.constants.TESTRPC_NETWORK_ID,
                    };
                    zeroEx = new _0x_1.ZeroEx(web3.currentProvider, config);
                    exchangeContractAddress = zeroEx.exchange.getContractAddress();
                    return [4 /*yield*/, zeroEx.getAvailableAddressesAsync()];
                case 1:
                    userAddresses = _b.sent();
                    return [4 /*yield*/, zeroEx.tokenRegistry.getTokensAsync()];
                case 2:
                    tokens = _b.sent();
                    tokenUtils = new token_utils_1.TokenUtils(tokens);
                    zrxTokenAddress = tokenUtils.getProtocolTokenOrThrow().address;
                    fillScenarios = new fill_scenarios_1.FillScenarios(zeroEx, userAddresses, tokens, zrxTokenAddress, exchangeContractAddress);
                    coinbase = userAddresses[0], makerAddress = userAddresses[1], takerAddress = userAddresses[2], feeRecipient = userAddresses[3];
                    return [4 /*yield*/, zeroEx.tokenRegistry.getTokensAsync()];
                case 3:
                    tokens = _b.sent();
                    _a = tokenUtils.getDummyTokens(), makerToken = _a[0], takerToken = _a[1];
                    makerTokenAddress = makerToken.address;
                    takerTokenAddress = takerToken.address;
                    return [2 /*return*/];
            }
        });
    }); });
    beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
        var sinonTimerConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, blockchainLifecycle.startAsync()];
                case 1:
                    _a.sent();
                    sinonTimerConfig = { shouldAdvanceTime: true };
                    // This constructor has incorrect types
                    timer = Sinon.useFakeTimers(sinonTimerConfig);
                    currentUnixTimestampSec = utils_2.utils.getCurrentUnixTimestampSec();
                    expirationWatcher = new expiration_watcher_1.ExpirationWatcher();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, blockchainLifecycle.revertAsync()];
                case 1:
                    _a.sent();
                    timer.restore();
                    expirationWatcher.unsubscribe();
                    return [2 /*return*/];
            }
        });
    }); });
    it('correctly emits events when order expires', function (done) {
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var orderLifetimeSec, expirationUnixTimestampSec, signedOrder, orderHash, callbackAsync;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        orderLifetimeSec = 60;
                        expirationUnixTimestampSec = currentUnixTimestampSec.plus(orderLifetimeSec);
                        return [4 /*yield*/, fillScenarios.createFillableSignedOrderAsync(makerTokenAddress, takerTokenAddress, makerAddress, takerAddress, fillableAmount, expirationUnixTimestampSec)];
                    case 1:
                        signedOrder = _a.sent();
                        orderHash = _0x_1.ZeroEx.getOrderHashHex(signedOrder);
                        expirationWatcher.addOrder(orderHash, signedOrder.expirationUnixTimestampSec.times(1000));
                        callbackAsync = report_callback_errors_1.reportNoErrorCallbackErrors(done)(function (hash) {
                            expect(hash).to.be.equal(orderHash);
                            expect(utils_2.utils.getCurrentUnixTimestampSec()).to.be.bignumber.gte(expirationUnixTimestampSec);
                        });
                        expirationWatcher.subscribe(callbackAsync);
                        timer.tick(orderLifetimeSec * 1000);
                        return [2 /*return*/];
                }
            });
        }); })().catch(done);
    });
    it("doesn't emit events before order expires", function (done) {
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var orderLifetimeSec, expirationUnixTimestampSec, signedOrder, orderHash, callbackAsync, notEnoughTime;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        orderLifetimeSec = 60;
                        expirationUnixTimestampSec = currentUnixTimestampSec.plus(orderLifetimeSec);
                        return [4 /*yield*/, fillScenarios.createFillableSignedOrderAsync(makerTokenAddress, takerTokenAddress, makerAddress, takerAddress, fillableAmount, expirationUnixTimestampSec)];
                    case 1:
                        signedOrder = _a.sent();
                        orderHash = _0x_1.ZeroEx.getOrderHashHex(signedOrder);
                        expirationWatcher.addOrder(orderHash, signedOrder.expirationUnixTimestampSec.times(1000));
                        callbackAsync = report_callback_errors_1.reportNoErrorCallbackErrors(done)(function (hash) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                done(new Error('Emitted expiration went before the order actually expired'));
                                return [2 /*return*/];
                            });
                        }); });
                        expirationWatcher.subscribe(callbackAsync);
                        notEnoughTime = orderLifetimeSec - 1;
                        timer.tick(notEnoughTime * 1000);
                        done();
                        return [2 /*return*/];
                }
            });
        }); })().catch(done);
    });
    it('emits events in correct order', function (done) {
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var order1Lifetime, order2Lifetime, order1ExpirationUnixTimestampSec, order2ExpirationUnixTimestampSec, signedOrder1, signedOrder2, orderHash1, orderHash2, expirationOrder, expectToBeCalledOnce, callbackAsync;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        order1Lifetime = 60;
                        order2Lifetime = 120;
                        order1ExpirationUnixTimestampSec = currentUnixTimestampSec.plus(order1Lifetime);
                        order2ExpirationUnixTimestampSec = currentUnixTimestampSec.plus(order2Lifetime);
                        return [4 /*yield*/, fillScenarios.createFillableSignedOrderAsync(makerTokenAddress, takerTokenAddress, makerAddress, takerAddress, fillableAmount, order1ExpirationUnixTimestampSec)];
                    case 1:
                        signedOrder1 = _a.sent();
                        return [4 /*yield*/, fillScenarios.createFillableSignedOrderAsync(makerTokenAddress, takerTokenAddress, makerAddress, takerAddress, fillableAmount, order2ExpirationUnixTimestampSec)];
                    case 2:
                        signedOrder2 = _a.sent();
                        orderHash1 = _0x_1.ZeroEx.getOrderHashHex(signedOrder1);
                        orderHash2 = _0x_1.ZeroEx.getOrderHashHex(signedOrder2);
                        expirationWatcher.addOrder(orderHash2, signedOrder2.expirationUnixTimestampSec.times(1000));
                        expirationWatcher.addOrder(orderHash1, signedOrder1.expirationUnixTimestampSec.times(1000));
                        expirationOrder = [orderHash1, orderHash2];
                        expectToBeCalledOnce = false;
                        callbackAsync = report_callback_errors_1.reportNoErrorCallbackErrors(done, expectToBeCalledOnce)(function (hash) {
                            var orderHash = expirationOrder.shift();
                            expect(hash).to.be.equal(orderHash);
                            if (_.isEmpty(expirationOrder)) {
                                done();
                            }
                        });
                        expirationWatcher.subscribe(callbackAsync);
                        timer.tick(order2Lifetime * 1000);
                        return [2 /*return*/];
                }
            });
        }); })().catch(done);
    });
});
//# sourceMappingURL=expiration_watcher_test.js.map