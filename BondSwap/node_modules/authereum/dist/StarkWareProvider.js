"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
class StarkWareProvider {
    constructor(authereum) {
        this.send = (method, params) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'providerRpc',
                params: {
                    method,
                    params
                }
            });
        });
        this.getPublicKey = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkPublicKey'
            });
        });
        this.getEthAddress = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkEthAddress'
            });
        });
        this.signNonce = (nonce) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkSignNonce',
                params: {
                    nonce
                }
            });
        });
        this.setContractAddress = (contractAddress) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkContractAddress',
                params: {
                    contractAddress
                }
            });
        });
        this.getContractAddress = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkContractAddress'
            });
        });
        this.register = (operatorSignature) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkRegister',
                params: {
                    operatorSignature
                }
            });
        });
        this.deposit = (quantizedAmount, token, vaultId) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDeposit',
                params: {
                    quantizedAmount,
                    token,
                    vaultId
                }
            });
        });
        this.depositCancel = (token, vaultId) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositCancel',
                params: {
                    token,
                    vaultId
                }
            });
        });
        this.depositReclaim = (token, vaultId) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositReclaim',
                params: {
                    token,
                    vaultId
                }
            });
        });
        this.transfer = (to, vaultId, token, quantizedAmount, nonce, expirationTimestamp) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkTransfer',
                params: {
                    to,
                    vaultId,
                    token,
                    quantizedAmount,
                    nonce,
                    expirationTimestamp
                }
            });
        });
        this.createOrder = (sell, buy, nonce, expirationTimestamp) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkCreateOrder',
                params: {
                    sell,
                    buy,
                    nonce,
                    expirationTimestamp
                }
            });
        });
        this.withdraw = (token) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkWithdraw',
                params: {
                    token
                }
            });
        });
        this.withdrawFull = (vaultId) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkWithdrawFull',
                params: {
                    vaultId
                }
            });
        });
        this.freezeVault = (vaultId) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkFreezeVault',
                params: {
                    vaultId
                }
            });
        });
        this.verifyEscape = (proof) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkVerifyEscape',
                params: {
                    proof
                }
            });
        });
        this.escape = (vaultId, token, quantizedAmount) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkEscape',
                params: {
                    vaultId,
                    token,
                    quantizedAmount
                }
            });
        });
        this.getSignatureParams = (signature) => {
            console.warn('Deprecation notice: `starkProvider._starkSignatureParams()` is deprecated. Use `starkProvider.deserializeSignature()` instead.');
            return this.deserializeSignature(signature);
        };
        this.deserializeSignature = (signature) => {
            return utils_1.deserializeSignature(signature);
        };
        this.serializeSignature = (sig) => {
            return utils_1.serializeSignature(sig);
        };
        this.authereum = authereum;
    }
}
exports.default = StarkWareProvider;
