import BN from 'bn.js';
export declare const uuidv4: () => string;
export declare const privateKeyToAddress: any;
export declare const wait: (t: number) => Promise<unknown>;
export declare const toHex: (value: any, opts?: any) => any;
export declare const signWithPrivateKey: (message: string, privateKey: string, providerUri: string) => Promise<string>;
export declare const debounce: (callback: any, time: any) => (...args: any[]) => void;
export declare const throttle: (fn: any, interval: number, limit?: number) => (...args: any[]) => Promise<unknown>;
export declare const getQueryParamValue: (name: string) => any;
export declare const removeQueryParam: (key: string, url?: string) => string;
export declare const updateQueryParams: (params?: any, url?: string) => string;
export declare const replaceWindowUrl: (newUrl: string) => void;
export declare const browserInfo: () => {
    browser: any;
    version: any;
};
export interface SignatureOptions {
    r: BN;
    s: BN;
    recoveryParam: number | null | undefined;
}
export declare const exportRecoveryParam: (recoveryParam: number) => string;
export declare const importRecoveryParam: (v: string) => number;
export declare const serializeSignature: (sig: SignatureOptions) => string;
export declare const deserializeSignature: (sig: string) => SignatureOptions;
