declare class StarkWareProvider {
    authereum: any;
    constructor(authereum: any);
    send: (method: string, params: any) => Promise<any>;
    getPublicKey: () => Promise<string>;
    getEthAddress: () => Promise<string>;
    signNonce: (nonce: import("ethers/providers").BlockTag) => Promise<string>;
    setContractAddress: (contractAddress: string) => Promise<string>;
    getContractAddress: () => Promise<string>;
    register: (operatorSignature: string) => Promise<string>;
    deposit: (quantizedAmount: string, token: any, vaultId: string) => Promise<string>;
    depositCancel: (token: any, vaultId: string) => Promise<string>;
    depositReclaim: (token: any, vaultId: string) => Promise<string>;
    transfer: (to: any, vaultId: string, token: any, quantizedAmount: string, nonce: string, expirationTimestamp: string) => Promise<string>;
    createOrder: (sell: any, buy: any, nonce: string, expirationTimestamp: string) => Promise<string>;
    withdraw: (token: any) => Promise<string>;
    withdrawFull: (vaultId: string) => Promise<string>;
    freezeVault: (vaultId: string) => Promise<string>;
    verifyEscape: (proof: string[]) => Promise<string>;
    escape: (vaultId: string, token: any, quantizedAmount: string) => Promise<string>;
    getSignatureParams: (signature: string) => import("./utils").SignatureOptions;
    deserializeSignature: (signature: string) => import("./utils").SignatureOptions;
    serializeSignature: (sig: any) => string;
}
export default StarkWareProvider;
