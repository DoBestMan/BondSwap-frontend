"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const waterfall_1 = __importDefault(require("async/waterfall"));
const ethUtil = __importStar(require("ethereumjs-util"));
const xtend_1 = __importDefault(require("xtend"));
const web3_provider_engine_1 = __importDefault(require("web3-provider-engine"));
const hooked_wallet_1 = __importDefault(require("web3-provider-engine/subproviders/hooked-wallet"));
const rpc_1 = __importDefault(require("web3-provider-engine/subproviders/rpc"));
const subscriptions_1 = __importDefault(require("web3-provider-engine/subproviders/subscriptions"));
const filters_1 = __importDefault(require("web3-provider-engine/subproviders/filters"));
const pify_1 = __importDefault(require("pify"));
const web3Utils = __importStar(require("web3-utils"));
const AuthereumSDK_1 = __importDefault(require("./AuthereumSDK"));
const utils_1 = require("./utils");
class AuthereumProvider extends web3_provider_engine_1.default {
    constructor(config) {
        super();
        this.isAuthereum = true;
        this.lastSignTx = '';
        this.lastSignTxTimeout = null;
        this.lastTx = '';
        this.lastTxTimeout = null;
        this.lastMsg = '';
        this.lastMsgTimeout = null;
        this.lastTypedMsg = '';
        this.lastTypedMsgTimeout = null;
        let authereumClient = null;
        if (config instanceof AuthereumSDK_1.default) {
            authereumClient = config;
            config = authereumClient.config;
        }
        this.config = config || {};
        this.authereum = authereumClient || new AuthereumSDK_1.default(this.config);
        this.initSubprovider();
        this.isAuthereum = true;
    }
    initSubprovider() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.authereum._tilReady();
            this.rpcUri = this.config.rpcUri || (yield this.authereum.getRpcUri());
            const throttleTimeout = 2e3;
            const walletSubprovider = new hooked_wallet_1.default({
                getAccounts: (cb) => __awaiter(this, void 0, void 0, function* () {
                    const loggedIn = yield this.authereum.isAuthenticated();
                    if (!loggedIn) {
                        if (cb) {
                            cb(null, []);
                        }
                        return [];
                    }
                    const accountAddress = yield this.authereum.getAccountAddress();
                    if (!accountAddress) {
                        if (cb) {
                            cb(null, []);
                        }
                        return [];
                    }
                    if (cb) {
                        cb(null, [accountAddress]);
                    }
                    return [accountAddress];
                }),
                approveTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    if (cb) {
                        cb(null, true);
                    }
                    return true;
                }),
                approveMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    if (cb) {
                        cb(null, true);
                    }
                    return true;
                }),
                approveTypedMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    if (cb) {
                        cb(null, true);
                    }
                    return true;
                }),
                signMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    let currentMsg = msgParams;
                    try {
                        currentMsg = JSON.stringify(msgParams);
                    }
                    catch (err) {
                        // noop
                    }
                    // Throttle if the tx is identical
                    clearTimeout(this.lastMsgTimeout);
                    if (this.lastMsg === currentMsg) {
                        return this._throttledSignMessage(msgParams, cb);
                    }
                    // Check if this is the first one. If so, run it through the throttling function
                    const isFirst = !this.lastMsg;
                    this.lastMsg = currentMsg;
                    this.lastMsgTimeout = setTimeout(() => {
                        this.lastMsg = '';
                    }, throttleTimeout);
                    if (isFirst) {
                        return this._throttledSignMessage(msgParams, cb);
                    }
                    return this._signMessage(msgParams, cb);
                }),
                signTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    const t = Object.assign({}, txParams);
                    t.nonce = null;
                    // Throttle if the tx is identical
                    const currentTx = JSON.stringify(t);
                    clearTimeout(this.lastSignTxTimeout);
                    if (this.lastSignTx === currentTx) {
                        return this._throttledSignTransaction(txParams, cb);
                    }
                    // Check if this is the first one. If so, run it through the throttling function
                    const isFirst = !this.lastSignTx;
                    this.lastSignTx = currentTx;
                    this.lastSignTxTimeout = setTimeout(() => {
                        this.lastSignTx = '';
                    }, throttleTimeout);
                    if (isFirst) {
                        return this._throttledSignTransaction(txParams, cb);
                    }
                    return this._signTransaction(txParams, cb);
                }),
                processSignTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    const t = Object.assign({}, txParams);
                    t.nonce = null;
                    // Throttle if the tx is identical
                    const currentTx = JSON.stringify(t);
                    clearTimeout(this.lastTxTimeout);
                    if (this.lastTx === currentTx) {
                        return this._throttledProcessSignTransaction(txParams, cb);
                    }
                    // Check if this is the first one. If so, run it through the throttling function
                    const isFirst = !this.lastTx;
                    this.lastTx = currentTx;
                    this.lastTxTimeout = setTimeout(() => {
                        this.lastTx = '';
                    }, throttleTimeout);
                    if (isFirst) {
                        return this._throttledProcessSignTransaction(txParams, cb);
                    }
                    return walletSubprovider.finalizeTx(txParams, cb);
                }),
                processTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    const t = Object.assign({}, txParams);
                    t.nonce = null;
                    // Throttle if the tx is identical
                    const currentTx = JSON.stringify(t);
                    clearTimeout(this.lastTxTimeout);
                    if (this.lastTx === currentTx) {
                        return this._throttledProcessTransaction(txParams, cb);
                    }
                    // Check if this is the first one. If so, run it through the throttling function
                    const isFirst = !this.lastTx;
                    this.lastTx = currentTx;
                    this.lastTxTimeout = setTimeout(() => {
                        this.lastTx = '';
                    }, throttleTimeout);
                    if (isFirst) {
                        return this._throttledProcessTransaction(txParams, cb);
                    }
                    return this._processTransaction(txParams, cb);
                }),
                finalizeTx: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const signedTx = yield this._signTransaction(txParams);
                        const res = { raw: signedTx, tx: txParams };
                        if (cb) {
                            cb(null, res);
                        }
                        return res;
                    }
                    catch (err) {
                        if (cb) {
                            cb(err);
                        }
                        throw err;
                    }
                }),
                approvePersonalMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    if (cb) {
                        cb(null, true);
                    }
                    return true;
                }),
                signPersonalMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    msgParams.personal = true;
                    return walletSubprovider.signMessage(msgParams, cb);
                }),
                signTypedMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                    let currentTypedMsg = msgParams;
                    try {
                        currentTypedMsg = JSON.stringify(msgParams);
                    }
                    catch (err) {
                        // noop
                    }
                    // Throttle if the tx is identical
                    clearTimeout(this.lastTypedMsgTimeout);
                    if (this.lastTypedMsg === currentTypedMsg) {
                        return this._throttledSignTypedMessage(msgParams, cb);
                    }
                    // Check if this is the first one. If so, run it through the throttling function
                    const isFirst = !this.lastTypedMsg;
                    this.lastTypedMsg = currentTypedMsg;
                    this.lastTypedMsgTimeout = setTimeout(() => {
                        this.lastTypedMsg = '';
                    }, throttleTimeout);
                    if (isFirst) {
                        return this._throttledSignTypedMessage(msgParams, cb);
                    }
                    return this._signTypedMessage(msgParams, cb);
                })
            });
            this.walletSubprovider = walletSubprovider;
            this._processTransaction = (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const signedTransaction = yield pify_1.default(walletSubprovider.signTransaction.bind(walletSubprovider))(txParams);
                    const transactionHash = web3Utils.sha3(signedTransaction);
                    if (cb) {
                        cb(null, transactionHash);
                    }
                    return transactionHash;
                }
                catch (err) {
                    if (cb) {
                        cb(err);
                        return;
                    }
                    throw err;
                }
            });
            this._throttledProcessSignTransaction = utils_1.throttle((txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                return walletSubprovider.finalizeTx(txParams, cb);
            }), throttleTimeout);
            this._throttledProcessTransaction = utils_1.throttle((txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                return this._processTransaction(txParams, cb);
            }), throttleTimeout);
            this._signMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const signature = yield this.authereum.signMessage(msgParams.data, {
                        personal: msgParams.personal,
                        includeAuthSignature: true
                    });
                    if (cb) {
                        cb(null, signature);
                    }
                    return signature;
                }
                catch (err) {
                    if (cb) {
                        cb(err);
                    }
                }
            });
            this._throttledSignMessage = utils_1.throttle((msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                return this._signMessage(msgParams, cb);
            }), throttleTimeout);
            this._signTypedMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const signature = yield this.authereum.signMessage(msgParams.data, {
                        includeAuthSignature: true
                    });
                    if (cb) {
                        cb(null, signature);
                    }
                    return signature;
                }
                catch (err) {
                    if (cb) {
                        cb(err);
                    }
                }
            });
            this._throttledSignTypedMessage = utils_1.throttle((msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                return this._signTypedMessage(msgParams, cb);
            }), throttleTimeout);
            this._signTransaction = (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const res = yield this.authereum.signTransaction(txParams);
                    if (!res) {
                        throw new Error('Error signing transaction');
                    }
                    if (cb) {
                        cb(null, res.signedTransactionData);
                    }
                    return res.signedTransactionData;
                }
                catch (err) {
                    cb(err);
                }
            });
            this._throttledSignTransaction = utils_1.throttle((txParams, cb) => __awaiter(this, void 0, void 0, function* () {
                return this._signTransaction(txParams, cb);
            }), throttleTimeout);
            // keep reference to original sendAsync
            this._sendAsync = this.sendAsync;
            this.sendAsync = (payload, callback) => __awaiter(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => {
                    if (!callback) {
                        callback = (err, response) => {
                            if (err) {
                                reject(err);
                                return;
                            }
                            resolve(response);
                        };
                    }
                    this._sendAsync(payload, callback);
                });
            });
            this.send = (payload, callback) => {
                // Web3 >=1.0-beta.38 calls `send` with method and parameters
                if (typeof payload === 'string') {
                    return new Promise((resolve, reject) => {
                        this.sendAsync({
                            jsonrpc: '2.0',
                            id: 1,
                            method: payload,
                            params: callback || []
                        }, (error, response) => {
                            if (error) {
                                reject(error);
                            }
                            else {
                                resolve(response.result);
                            }
                        });
                    });
                }
                // Web3 <=1.0 beta.37 uses `send` with a callback for async queries
                if (callback) {
                    this.sendAsync(payload, callback);
                    return;
                }
                let result = null;
                switch (payload.method) {
                    case 'eth_uninstallFilter':
                        this.sendAsync(payload, () => {
                            // noop
                        });
                        result = true;
                        break;
                    default:
                        let message = `The Authereum Web3 object does not support synchronous methods like ${payload.method} without a callback parameter.`;
                        throw new Error(message);
                }
                return {
                    id: payload.id,
                    jsonrpc: payload.jsonrpc,
                    result: result
                };
            };
            walletSubprovider.handleRequest = (payload, next, end) => {
                const self = walletSubprovider;
                self._parityRequests = {};
                self._parityRequestCount = 0;
                // switch statement is not block scoped
                // sp we cant repeat var declarations
                let txParams;
                let msgParams;
                let extraParams;
                let message;
                let address;
                const method = payload.method;
                if (method && method.startsWith('stark_')) {
                    this.authereum.getStarkProvider().send(method, payload.params)
                        .then(result => end(null, result))
                        .catch(err => end(err));
                    return;
                }
                switch (method) {
                    case 'eth_coinbase':
                        // process normally
                        self.getAccounts((err, accounts) => {
                            if (err)
                                return end(err);
                            let result = accounts[0] || null;
                            end(null, result);
                        });
                        return;
                    case 'eth_accounts':
                        // process normally
                        self.getAccounts((err, accounts) => {
                            if (err)
                                return end(err);
                            end(null, accounts);
                        });
                        return;
                    case 'eth_sendTransaction':
                        txParams = payload.params[0];
                        waterfall_1.default([
                            (cb) => self.processTransaction(txParams, cb)
                        ], end);
                        return;
                    case 'eth_signTransaction':
                        txParams = payload.params[0];
                        waterfall_1.default([
                            (cb) => self.processSignTransaction(txParams, cb)
                        ], end);
                        return;
                    case 'eth_sign':
                        // process normally
                        address = payload.params[0];
                        message = payload.params[1];
                        // non-standard "extraParams" to be appended to our "msgParams" obj
                        // good place for metadata
                        extraParams = payload.params[2] || {};
                        msgParams = xtend_1.default(extraParams, {
                            from: address,
                            data: message
                        });
                        waterfall_1.default([
                            (cb) => self.processMessage(msgParams, cb)
                        ], end);
                        return;
                    case 'personal_sign':
                        return (() => {
                            // process normally
                            const first = payload.params[0];
                            const second = payload.params[1];
                            // We initially incorrectly ordered these parameters.
                            // To gracefully respect users who adopted this API early,
                            // we are currently gracefully recovering from the wrong param order
                            // when it is clearly identifiable.
                            //
                            // That means when the first param is definitely an address,
                            // and the second param is definitely not, but is hex.
                            if (resemblesData(second) && resemblesAddress(first)) {
                                let warning = `The eth_personalSign method requires params ordered `;
                                warning += `[message, address]. This was previously handled incorrectly, `;
                                warning += `and has been corrected automatically. `;
                                warning += `Please switch this param order for smooth behavior in the future.`;
                                console.warn(warning);
                                address = payload.params[0];
                                message = payload.params[1];
                            }
                            else {
                                message = payload.params[0];
                                address = payload.params[1];
                            }
                            // non-standard "extraParams" to be appended to our "msgParams" obj
                            // good place for metadata
                            extraParams = payload.params[2] || {};
                            msgParams = xtend_1.default(extraParams, {
                                from: address,
                                data: message
                            });
                            waterfall_1.default([
                                (cb) => self.processPersonalMessage(msgParams, cb)
                            ], end);
                        })();
                    case 'eth_decryptMessage':
                        return (() => {
                            // process normally
                            const first = payload.params[0];
                            const second = payload.params[1];
                            // We initially incorrectly ordered these parameters.
                            // To gracefully respect users who adopted this API early,
                            // we are currently gracefully recovering from the wrong param order
                            // when it is clearly identifiable.
                            //
                            // That means when the first param is definitely an address,
                            // and the second param is definitely not, but is hex.
                            if (resemblesData(second) && resemblesAddress(first)) {
                                let warning = `The eth_decryptMessage method requires params ordered `;
                                warning += `[message, address]. This was previously handled incorrectly, `;
                                warning += `and has been corrected automatically. `;
                                warning += `Please switch this param order for smooth behavior in the future.`;
                                console.warn(warning);
                                address = payload.params[0];
                                message = payload.params[1];
                            }
                            else {
                                message = payload.params[0];
                                address = payload.params[1];
                            }
                            // non-standard "extraParams" to be appended to our "msgParams" obj
                            // good place for metadata
                            extraParams = payload.params[2] || {};
                            msgParams = xtend_1.default(extraParams, {
                                from: address,
                                data: message
                            });
                            waterfall_1.default([
                                (cb) => self.validateDecryptMessage(msgParams, cb),
                                (cb) => self.processDecryptMessage(msgParams, cb)
                            ], end);
                        })();
                    case 'encryption_public_key':
                        return (() => {
                            address = payload.params[0];
                            waterfall_1.default([
                                (cb) => self.validateEncryptionPublicKey(address, cb),
                                (cb) => self.processEncryptionPublicKey(address, cb)
                            ], end);
                        })();
                    case 'personal_ecRecover':
                        return (() => {
                            message = payload.params[0];
                            let signature = payload.params[1];
                            // non-standard "extraParams" to be appended to our "msgParams" obj
                            // good place for metadata
                            extraParams = payload.params[2] || {};
                            msgParams = xtend_1.default(extraParams, {
                                sig: signature,
                                data: message
                            });
                            self.recoverPersonalSignature(msgParams, end);
                        })();
                    case 'eth_signTypedData':
                        // process normally
                        message = payload.params[0];
                        address = payload.params[1];
                        extraParams = payload.params[2] || {};
                        msgParams = xtend_1.default(extraParams, {
                            from: address,
                            data: message
                        });
                        waterfall_1.default([
                            (cb) => self.processTypedMessage(msgParams, cb)
                        ], end);
                        return;
                    case 'eth_signTypedData_v3':
                        // process normally
                        address = payload.params[0];
                        message = payload.params[1];
                        extraParams = payload.params[2] || {};
                        msgParams = xtend_1.default(extraParams, {
                            from: address,
                            data: message
                        });
                        waterfall_1.default([
                            (cb) => self.processTypedMessage(msgParams, cb)
                        ], end);
                        return;
                    case 'parity_postTransaction':
                        txParams = payload.params[0];
                        self.parityPostTransaction(txParams, end);
                        return;
                    case 'parity_postSign':
                        address = payload.params[0];
                        message = payload.params[1];
                        self.parityPostSign(address, message, end);
                        return;
                    case 'parity_checkRequest':
                        return (() => {
                            const requestId = payload.params[0];
                            self.parityCheckRequest(requestId, end);
                        })();
                    case 'parity_defaultAccount':
                        self.getAccounts((err, accounts) => {
                            if (err)
                                return end(err);
                            const account = accounts[0] || null;
                            end(null, account);
                        });
                        return;
                    default: {
                        next();
                        return;
                    }
                }
            };
            walletSubprovider.validatePersonalMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                if (cb) {
                    cb(null, true);
                }
                return true;
            });
            walletSubprovider.validateMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                if (cb) {
                    cb(null, true);
                }
                return true;
            });
            walletSubprovider.validateTypedMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
                if (cb) {
                    cb(null, true);
                }
                return true;
            });
            this.addProvider(walletSubprovider);
            this.rpcSubProvider = new rpc_1.default({
                rpcUrl: this.rpcUri
            });
            this.addProvider(new subscriptions_1.default());
            this.addProvider(new filters_1.default());
            this.addProvider({
                setEngine: _ => _,
                handleRequest: (payload, next, end) => __awaiter(this, void 0, void 0, function* () {
                    this.rpcSubProvider.handleRequest(payload, next, end);
                })
            });
            // network connectivity error
            this.on('error', (err) => {
                console.error(err.stack);
            });
            // start polling
            this.start();
            this._blockTracker.removeAllListeners();
        });
    }
    getAccounts(cb) {
        return __awaiter(this, void 0, void 0, function* () {
            const loggedIn = yield this.authereum.isAuthenticated();
            if (!loggedIn) {
                if (cb) {
                    cb(null, []);
                }
                return [];
            }
            const accountAddress = yield this.authereum.getAccountAddress();
            if (!accountAddress) {
                if (cb) {
                    cb(null, []);
                }
                return [];
            }
            if (cb) {
                cb(null, [accountAddress]);
            }
            return [accountAddress];
        });
    }
    isConnected() {
        return this.authereum.isAuthenticatedSync();
    }
    enable() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.authereum.login();
            const accountAddress = yield this.authereum.getAccountAddress();
            if (accountAddress) {
                return [accountAddress];
            }
            return [];
        });
    }
    disable() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authereum.logout();
        });
    }
    tilDomReady() {
        return new Promise((resolve) => {
            if (document.readyState !== 'loading') {
                resolve();
            }
            else {
                document.addEventListener('DOMContentLoaded', () => resolve());
            }
        });
    }
    sendTransaction(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendTransactionBatch([tx]);
        });
    }
    sendTransactionBatch(txs) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authereum.sendTransactionBatch(txs);
        });
    }
    estimateGasBatch(txs) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authereum.estimateGasBatch(txs);
        });
    }
    sign(msgParams) {
        return this._signMessage(msgParams);
    }
    signMessageWithAdminKey(message) {
        return this.authereum.signMessageWithAdminKey(message);
    }
    signMessageWithSigningKey(...input) {
        return this.authereum.signMessageWithSigningKey(...input);
    }
    showWidget(enabled = true) {
        return this.authereum.showWidget(enabled);
    }
    widgetEnabled() {
        return this.authereum.widgetEnabled();
    }
    getTransactionReceipt(txHash) {
        return this.authereum.getTransactionReceipt(txHash);
    }
    waitForTransactionReceipt(txHash) {
        return this.authereum.waitForTransactionReceipt(txHash);
    }
    isContractDeployed(accountAddress) {
        return this.authereum.isContractDeployed(accountAddress);
    }
}
exports.default = AuthereumProvider;
function resemblesAddress(str) {
    const fixed = ethUtil.addHexPrefix(str);
    const isValid = ethUtil.isValidAddress(fixed);
    return isValid;
}
// Returns true if resembles hex data
// but definitely not a valid address.
function resemblesData(str) {
    const fixed = ethUtil.addHexPrefix(str);
    const isValidAddress = ethUtil.isValidAddress(fixed);
    return !isValidAddress && isValidHex(str);
}
function isValidHex(data) {
    const isString = typeof data === 'string';
    if (!isString)
        return false;
    const isHexPrefixed = data.slice(0, 2) === '0x';
    if (!isHexPrefixed)
        return false;
    const nonPrefixed = data.slice(2);
    const hexRegex = /^[0-9A-Fa-f]+$/g;
    const isValid = nonPrefixed.match(hexRegex);
    return isValid;
}
