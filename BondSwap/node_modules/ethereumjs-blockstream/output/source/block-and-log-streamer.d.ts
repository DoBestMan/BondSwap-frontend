import { Block } from "./models/block";
import { Log } from "./models/log";
import { Filter, FilterOptions } from "./models/filters";
export declare class BlockAndLogStreamer {
    private blockHistory;
    private logHistory;
    private latestBlock;
    private readonly blockRetention;
    private readonly getBlockByHash;
    private readonly getLogs;
    private readonly logFilters;
    private readonly onBlockAddedSubscribers;
    private readonly onBlockRemovedSubscribers;
    private readonly onLogAddedSubscribers;
    private readonly onLogRemovedSubscribers;
    constructor(getBlockByHash: (hash: string) => Promise<Block | null>, getLogs: (filterOptions: FilterOptions) => Promise<Log[]>, configuration?: {
        blockRetention?: number;
    });
    static createCallbackStyle: (getBlockByHash: (hash: string, callback: (error?: Error | undefined, block?: Block | null | undefined) => void) => void, getLogs: (filterOptions: FilterOptions, callback: (error?: Error | undefined, logs?: Log[] | undefined) => void) => void, configuration?: {
        blockRetention?: number | undefined;
    } | undefined) => BlockAndLogStreamer;
    readonly reconcileNewBlock: (block: Block) => Promise<void>;
    readonly reconcileNewBlockCallbackStyle: (block: Block, callback: (error?: Error | undefined) => void) => Promise<void>;
    private readonly onBlockAdded;
    private readonly onBlockRemoved;
    private readonly onLogAdded;
    private readonly onLogRemoved;
    readonly getLatestReconciledBlock: () => Block | null;
    readonly addLogFilter: (filter: Filter) => string;
    readonly removeLogFilter: (token: string) => void;
    readonly subscribeToOnBlockAdded: (onBlockAdded: (block: Block) => void) => string;
    readonly unsubscribeFromOnBlockAdded: (token: string) => void;
    readonly subscribeToOnBlockRemoved: (onBlockRemoved: (block: Block) => void) => string;
    readonly unsubscribeFromOnBlockRemoved: (token: string) => void;
    readonly subscribeToOnLogAdded: (onLogAdded: (log: Log) => void) => string;
    readonly unsubscribeFromOnLogAdded: (token: string) => void;
    readonly subscribeToOnLogRemoved: (onLogRemoved: (log: Log) => void) => string;
    readonly unsubscribeFromOnLogRemoved: (token: string) => void;
}
