"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var block_reconciler_1 = require("./block-reconciler");
var log_reconciler_1 = require("./log-reconciler");
var immutable_1 = require("immutable");
var createUuid = require("uuid");
var BlockAndLogStreamer = /** @class */ (function () {
    function BlockAndLogStreamer(getBlockByHash, getLogs, configuration) {
        var _this = this;
        this.blockHistory = Promise.resolve(immutable_1.List());
        this.logHistory = Promise.resolve(immutable_1.List());
        this.latestBlock = null;
        this.logFilters = {};
        this.onBlockAddedSubscribers = {};
        this.onBlockRemovedSubscribers = {};
        this.onLogAddedSubscribers = {};
        this.onLogRemovedSubscribers = {};
        this.reconcileNewBlock = function (block) { return __awaiter(_this, void 0, void 0, function () {
            var blockHistory;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.blockHistory = block_reconciler_1.reconcileBlockHistory(this.getBlockByHash, this.blockHistory, block, this.onBlockAdded, this.onBlockRemoved, this.blockRetention);
                        return [4 /*yield*/, this.blockHistory];
                    case 1:
                        blockHistory = _a.sent();
                        this.latestBlock = blockHistory.last();
                        return [2 /*return*/];
                }
            });
        }); };
        this.reconcileNewBlockCallbackStyle = function (block, callback) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.reconcileNewBlock(block)
                    .then(function () { return callback(undefined); })
                    .catch(function (error) { return callback(error); });
                return [2 /*return*/];
            });
        }); };
        this.onBlockAdded = function (block) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var logFilters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logFilters = Object.keys(this.logFilters).map(function (key) { return _this.logFilters[key]; });
                        this.logHistory = log_reconciler_1.reconcileLogHistoryWithAddedBlock(this.getLogs, this.logHistory, block, this.onLogAdded, logFilters, this.blockRetention);
                        return [4 /*yield*/, this.logHistory];
                    case 1:
                        _a.sent();
                        Object.keys(this.onBlockAddedSubscribers)
                            .map(function (key) { return _this.onBlockAddedSubscribers[key]; })
                            .map(function (callback) { return logAndSwallowWrapper(callback); })
                            .forEach(function (callback) { return callback(block); });
                        return [2 /*return*/];
                }
            });
        }); };
        this.onBlockRemoved = function (block) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logHistory = log_reconciler_1.reconcileLogHistoryWithRemovedBlock(this.logHistory, block, this.onLogRemoved);
                        return [4 /*yield*/, this.logHistory];
                    case 1:
                        _a.sent();
                        Object.keys(this.onBlockRemovedSubscribers)
                            .map(function (key) { return _this.onBlockRemovedSubscribers[key]; })
                            .map(function (callback) { return logAndSwallowWrapper(callback); })
                            .forEach(function (callback) { return callback(block); });
                        return [2 /*return*/];
                }
            });
        }); };
        this.onLogAdded = function (log) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                Object.keys(this.onLogAddedSubscribers)
                    .map(function (key) { return _this.onLogAddedSubscribers[key]; })
                    .map(function (callback) { return logAndSwallowWrapper(callback); })
                    .forEach(function (callback) { return callback(log); });
                return [2 /*return*/];
            });
        }); };
        this.onLogRemoved = function (log) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                Object.keys(this.onLogRemovedSubscribers)
                    .map(function (key) { return _this.onLogRemovedSubscribers[key]; })
                    .map(function (callback) { return logAndSwallowWrapper(callback); })
                    .forEach(function (callback) { return callback(log); });
                return [2 /*return*/];
            });
        }); };
        this.getLatestReconciledBlock = function () {
            return _this.latestBlock;
        };
        this.addLogFilter = function (filter) {
            var uuid = "log filter token " + createUuid();
            _this.logFilters[uuid] = filter;
            return uuid;
        };
        this.removeLogFilter = function (token) {
            if (!token.startsWith("log filter token "))
                throw new Error("Expected a log filter token.  Actual: " + token);
            delete _this.logFilters[token];
        };
        this.subscribeToOnBlockAdded = function (onBlockAdded) {
            var uuid = "on block added token " + createUuid();
            _this.onBlockAddedSubscribers[uuid] = onBlockAdded;
            return uuid;
        };
        this.unsubscribeFromOnBlockAdded = function (token) {
            if (!token.startsWith("on block added token "))
                throw new Error("Expected a block added subscription token.  Actual: " + token);
            delete _this.onBlockAddedSubscribers[token];
        };
        this.subscribeToOnBlockRemoved = function (onBlockRemoved) {
            var uuid = "on block removed token " + createUuid();
            _this.onBlockRemovedSubscribers[uuid] = onBlockRemoved;
            return uuid;
        };
        this.unsubscribeFromOnBlockRemoved = function (token) {
            if (!token.startsWith("on block removed token "))
                throw new Error("Expected a block added subscription token.  Actual: " + token);
            delete _this.onBlockRemovedSubscribers[token];
        };
        this.subscribeToOnLogAdded = function (onLogAdded) {
            var uuid = "on log added token " + createUuid();
            _this.onLogAddedSubscribers[uuid] = onLogAdded;
            return uuid;
        };
        this.unsubscribeFromOnLogAdded = function (token) {
            if (!token.startsWith("on log added token "))
                throw new Error("Expected a log added subscription token.  Actual: " + token);
            delete _this.onLogAddedSubscribers[token];
        };
        this.subscribeToOnLogRemoved = function (onLogRemoved) {
            var uuid = "on log removed token " + createUuid();
            _this.onLogRemovedSubscribers[uuid] = onLogRemoved;
            return uuid;
        };
        this.unsubscribeFromOnLogRemoved = function (token) {
            if (!token.startsWith("on log removed token "))
                throw new Error("Expected a log added subscription token.  Actual: " + token);
            delete _this.onLogRemovedSubscribers[token];
        };
        this.getBlockByHash = getBlockByHash;
        this.getLogs = getLogs;
        this.blockRetention = (configuration && configuration.blockRetention) ? configuration.blockRetention : 100;
    }
    BlockAndLogStreamer.createCallbackStyle = function (getBlockByHash, getLogs, configuration) {
        var wrappedGetBlockByHash = function (hash) { return new Promise(function (resolve, reject) {
            getBlockByHash(hash, function (error, block) {
                if (error)
                    throw error;
                else
                    resolve(block);
            });
        }); };
        var wrappedGetLogs = function (filterOptions) { return new Promise(function (resolve, reject) {
            getLogs(filterOptions, function (error, logs) {
                if (error)
                    throw error;
                if (!logs)
                    throw new Error("Received null/undefined logs and no error.");
                resolve(logs);
            });
        }); };
        return new BlockAndLogStreamer(wrappedGetBlockByHash, wrappedGetLogs, configuration);
    };
    return BlockAndLogStreamer;
}());
exports.BlockAndLogStreamer = BlockAndLogStreamer;
function logAndSwallowWrapper(callback) {
    return function (parameter) {
        try {
            callback(parameter);
        }
        catch (error) {
            console.log(error);
        }
    };
}
//# sourceMappingURL=block-and-log-streamer.js.map