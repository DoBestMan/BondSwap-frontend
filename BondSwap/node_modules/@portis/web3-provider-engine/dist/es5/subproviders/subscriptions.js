'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProviderSubprovider = require('./json-rpc-engine-middleware');
var createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager');

var SubscriptionsSubprovider = function (_ProviderSubprovider) {
  _inherits(SubscriptionsSubprovider, _ProviderSubprovider);

  function SubscriptionsSubprovider() {
    _classCallCheck(this, SubscriptionsSubprovider);

    return _possibleConstructorReturn(this, (SubscriptionsSubprovider.__proto__ || Object.getPrototypeOf(SubscriptionsSubprovider)).call(this, function (_ref) {
      var blockTracker = _ref.blockTracker,
          provider = _ref.provider,
          engine = _ref.engine;

      var _createSubscriptionMa = createSubscriptionManager({ blockTracker: blockTracker, provider: provider }),
          events = _createSubscriptionMa.events,
          middleware = _createSubscriptionMa.middleware;
      // forward subscription events on the engine


      events.on('notification', function (data) {
        return engine.emit('data', null, data);
      });
      // return the subscription install/remove middleware
      return middleware;
    }));
  }

  return SubscriptionsSubprovider;
}(ProviderSubprovider);

module.exports = SubscriptionsSubprovider;