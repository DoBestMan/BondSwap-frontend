"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_provider_engine_1 = require("@portis/web3-provider-engine");
var cache_js_1 = require("@portis/web3-provider-engine/subproviders/cache.js");
var fixture_js_1 = require("@portis/web3-provider-engine/subproviders/fixture.js");
var filters_js_1 = require("@portis/web3-provider-engine/subproviders/filters.js");
var hooked_wallet_js_1 = require("@portis/web3-provider-engine/subproviders/hooked-wallet.js");
var nonce_tracker_js_1 = require("@portis/web3-provider-engine/subproviders/nonce-tracker.js");
var subscriptions_js_1 = require("@portis/web3-provider-engine/subproviders/subscriptions.js");
var penpal_1 = require("penpal");
var networks_1 = require("./networks");
var getTxGas_1 = require("./utils/getTxGas");
var query_1 = require("./utils/query");
var onWindowLoad_1 = require("./utils/onWindowLoad");
var styles_1 = require("./styles");
var secureOrigin_1 = require("./utils/secureOrigin");
var pocket_js_core_1 = require("pocket-js-core");
var VERSION = '2.0.0-beta.59';
var WIDGET_URL = 'https://widget.portis.io';
var STAGING_WIDGET_URL = 'https://widget-staging.portis.io';
var SUPPORTED_SCOPES = ['email', 'reputation'];
var PORTIS_IFRAME_CLASS = 'por_portis-iframe';
var PORTIS_CONTAINER_CLASS = 'por_portis-container';
var tempCachingIFrame = document.createElement('iframe');
tempCachingIFrame.className = PORTIS_IFRAME_CLASS;
tempCachingIFrame.style.width = '0';
tempCachingIFrame.style.height = '0';
tempCachingIFrame.style.border = 'none';
tempCachingIFrame.style.position = 'absolute';
tempCachingIFrame.style.top = '-999px';
tempCachingIFrame.style.left = '-999px';
tempCachingIFrame.src = WIDGET_URL;
onWindowLoad_1.onWindowLoad().then(function () {
    if (document.getElementsByClassName(PORTIS_IFRAME_CLASS).length) {
        console.warn('Portis script was already loaded. This might cause unexpected behavior. If loading with a <script> tag, please make sure that you only load it once.');
    }
    document.body.appendChild(tempCachingIFrame);
});
var Portis = /** @class */ (function () {
    function Portis(dappId, network, options) {
        if (options === void 0) { options = {}; }
        this._widgetUrl = WIDGET_URL;
        secureOrigin_1.validateSecureOrigin();
        this._checkIfWidgetAlreadyInitialized();
        this._validateParams(dappId, network, options);
        this.config = {
            dappId: dappId,
            network: networks_1.networkAdapter(network, options.gasRelay),
            version: VERSION,
            scope: options.scope,
            registerPageByDefault: options.registerPageByDefault,
        };
        this.widget = this._initWidget();
        this.provider = this._initProvider(options);
    }
    Portis.prototype.changeNetwork = function (network, gasRelay) {
        var newNetwork = networks_1.networkAdapter(network, gasRelay);
        this.clearSubprovider(nonce_tracker_js_1.default);
        this.clearSubprovider(cache_js_1.default);
        this.config.network = newNetwork;
    };
    Portis.prototype.setDefaultEmail = function (email) {
        this.config.defaultEmail = email;
    };
    Portis.prototype.showPortis = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.showPortis(this.config)];
                }
            });
        });
    };
    Portis.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.logout()];
                }
            });
        });
    };
    Portis.prototype.onLogin = function (callback) {
        this._onLoginCallback = callback;
    };
    Portis.prototype.onLogout = function (callback) {
        this._onLogoutCallback = callback;
    };
    Portis.prototype.onActiveWalletChanged = function (callback) {
        this._onActiveWalletChangedCallback = callback;
    };
    Portis.prototype.onError = function (callback) {
        this._onErrorCallback = callback;
    };
    Portis.prototype.getExtendedPublicKey = function (path, coin) {
        if (path === void 0) { path = "m/44'/60'/0'/0/0"; }
        if (coin === void 0) { coin = 'Ethereum'; }
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.getExtendedPublicKey(path, coin, this.config)];
                }
            });
        });
    };
    Portis.prototype.importWallet = function (mnemonicOrPrivateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.importWallet(mnemonicOrPrivateKey, this.config)];
                }
            });
        });
    };
    Portis.prototype.isLoggedIn = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.isLoggedIn()];
                }
            });
        });
    };
    Portis.prototype.signBitcoinTransaction = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.signBitcoinTransaction(params, this.config)];
                }
            });
        });
    };
    Portis.prototype.showBitcoinWallet = function (path) {
        if (path === void 0) { path = "m/49'/0'/0'/0/0"; }
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.showBitcoinWallet(path, this.config)];
                }
            });
        });
    };
    Portis.prototype._checkIfWidgetAlreadyInitialized = function () {
        if (document.getElementsByClassName(PORTIS_CONTAINER_CLASS).length) {
            console.warn('An instance of Portis was already initialized. This is probably a mistake. Make sure that you use the same Portis instance throughout your app.');
        }
    };
    Portis.prototype._validateParams = function (dappId, network, options) {
        if (!dappId) {
            throw new Error("[Portis] 'dappId' is required. Get your dappId here: https://dashboard.portis.io");
        }
        if (!network) {
            throw new Error("[Portis] 'network' is required. Read more about it here: https://docs.portis.io/#/configuration?id=network");
        }
        if (options.scope) {
            if (!Array.isArray(options.scope)) {
                throw new Error("[Portis] 'scope' must be an array. Read more about it here: https://docs.portis.io/#/configuration?id=scope");
            }
            var unknownScope = options.scope.filter(function (item) { return SUPPORTED_SCOPES.indexOf(item) < 0; });
            if (unknownScope.length > 0) {
                throw new Error("[Portis] invalid 'scope' parameter. Read more about it here: https://docs.portis.io/#/configuration?id=scope");
            }
        }
        if (options.registerPageByDefault !== undefined && typeof options.registerPageByDefault !== 'boolean') {
            throw new Error("[Portis] invalid 'registerPageByDefault' parameter, must be a boolean. Read more about it here: https://docs.portis.io/#/configuration?id=registerPageByDefault");
        }
        if (options.staging) {
            console.warn('Please note: you are using the Portis STAGING environment.');
            this._widgetUrl = STAGING_WIDGET_URL;
        }
    };
    Portis.prototype._initWidget = function () {
        return __awaiter(this, void 0, void 0, function () {
            var style, container, widgetFrame, connection, communication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, onWindowLoad_1.onWindowLoad()];
                    case 1:
                        _a.sent();
                        if (document.body.contains(tempCachingIFrame)) {
                            document.body.removeChild(tempCachingIFrame);
                        }
                        style = document.createElement('style');
                        style.innerHTML = styles_1.styles;
                        container = document.createElement('div');
                        container.className = PORTIS_CONTAINER_CLASS;
                        widgetFrame = document.createElement('div');
                        widgetFrame.id = "portis-container-" + Date.now();
                        widgetFrame.className = 'por_portis-widget-frame';
                        container.appendChild(widgetFrame);
                        document.body.appendChild(container);
                        document.head.appendChild(style);
                        connection = penpal_1.default.connectToChild({
                            url: this._widgetUrl,
                            appendTo: document.getElementById(widgetFrame.id),
                            methods: {
                                setHeight: this._setHeight.bind(this),
                                getWindowSize: this._getWindowSize.bind(this),
                                onLogin: this._onLogin.bind(this),
                                onLogout: this._onLogout.bind(this),
                                onActiveWalletChanged: this._onActiveWalletChanged.bind(this),
                                onError: this._onError.bind(this),
                            },
                        });
                        connection.iframe.style.position = 'absolute';
                        connection.iframe.style.height = '100%';
                        connection.iframe.style.width = '100%';
                        connection.iframe.style.border = '0 transparent';
                        return [4 /*yield*/, connection.promise];
                    case 2:
                        communication = _a.sent();
                        communication.retrieveSession(this.config);
                        return [2 /*return*/, { communication: communication, iframe: connection.iframe, widgetFrame: widgetFrame }];
                }
            });
        });
    };
    Portis.prototype._initProvider = function (options) {
        var _this = this;
        var engine = new web3_provider_engine_1.default();
        var query = new query_1.Query(engine);
        engine.send = function (payload, callback) {
            // Web3 1.0 beta.38 (and above) calls `send` with method and parameters
            if (typeof payload === 'string') {
                return new Promise(function (resolve, reject) {
                    engine.sendAsync({
                        jsonrpc: '2.0',
                        id: 42,
                        method: payload,
                        params: callback || [],
                    }, function (error, response) {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve(response.result);
                        }
                    });
                });
            }
            // Web3 1.0 beta.37 (and below) uses `send` with a callback for async queries
            if (callback) {
                engine.sendAsync(payload, callback);
                return;
            }
            var result = null;
            switch (payload.method) {
                case 'eth_accounts':
                    result = _this._selectedAddress ? [_this._selectedAddress] : [];
                    break;
                case 'eth_coinbase':
                    result = _this._selectedAddress ? [_this._selectedAddress] : [];
                    break;
                case 'net_version':
                    result = _this._network;
                    break;
                case 'eth_uninstallFilter':
                    engine.sendAsync(payload, function (_) { return _; });
                    result = true;
                    break;
                default:
                    var message = "The Portis Web3 object does not support synchronous methods like " + payload.method + " without a callback parameter.";
                    throw new Error(message);
            }
            return {
                id: payload.id,
                jsonrpc: payload.jsonrpc,
                result: result,
            };
        };
        engine.addProvider(new fixture_js_1.default({
            web3_clientVersion: "Portis/v" + this.config.version + "/javascript",
            net_listening: true,
            eth_hashrate: '0x00',
            eth_mining: false,
            eth_syncing: true,
        }));
        engine.addProvider(new cache_js_1.default());
        engine.addProvider(new subscriptions_js_1.default());
        engine.addProvider(new filters_js_1.default());
        engine.addProvider(new nonce_tracker_js_1.default());
        engine.addProvider({
            setEngine: function (_) { return _; },
            handleRequest: function (payload, next, end) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!payload.id) {
                        payload.id = 42;
                    }
                    next();
                    return [2 /*return*/];
                });
            }); },
        });
        engine.addProvider(new hooked_wallet_js_1.default({
            getAccounts: function (cb) { return __awaiter(_this, void 0, void 0, function () {
                var widgetCommunication, _a, error, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.widget];
                        case 1:
                            widgetCommunication = (_b.sent()).communication;
                            return [4 /*yield*/, widgetCommunication.getAccounts(this.config)];
                        case 2:
                            _a = _b.sent(), error = _a.error, result = _a.result;
                            if (!error && result) {
                                this._selectedAddress = result[0];
                            }
                            cb(error, result);
                            return [2 /*return*/];
                    }
                });
            }); },
            signTransaction: function (txParams, cb) { return __awaiter(_this, void 0, void 0, function () {
                var widgetCommunication, _a, error, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.widget];
                        case 1:
                            widgetCommunication = (_b.sent()).communication;
                            return [4 /*yield*/, widgetCommunication.signTransaction(txParams, this.config)];
                        case 2:
                            _a = _b.sent(), error = _a.error, result = _a.result;
                            cb(error, result);
                            return [2 /*return*/];
                    }
                });
            }); },
            signMessage: function (msgParams, cb) { return __awaiter(_this, void 0, void 0, function () {
                var widgetCommunication, params, _a, error, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.widget];
                        case 1:
                            widgetCommunication = (_b.sent()).communication;
                            params = Object.assign({}, msgParams, { messageStandard: 'signMessage' });
                            return [4 /*yield*/, widgetCommunication.signMessage(params, this.config)];
                        case 2:
                            _a = _b.sent(), error = _a.error, result = _a.result;
                            cb(error, result);
                            return [2 /*return*/];
                    }
                });
            }); },
            signPersonalMessage: function (msgParams, cb) { return __awaiter(_this, void 0, void 0, function () {
                var widgetCommunication, params, _a, error, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.widget];
                        case 1:
                            widgetCommunication = (_b.sent()).communication;
                            params = Object.assign({}, msgParams, { messageStandard: 'signPersonalMessage' });
                            return [4 /*yield*/, widgetCommunication.signMessage(params, this.config)];
                        case 2:
                            _a = _b.sent(), error = _a.error, result = _a.result;
                            cb(error, result);
                            return [2 /*return*/];
                    }
                });
            }); },
            signTypedMessage: function (msgParams, cb) { return __awaiter(_this, void 0, void 0, function () {
                var widgetCommunication, params, _a, error, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.widget];
                        case 1:
                            widgetCommunication = (_b.sent()).communication;
                            params = Object.assign({}, msgParams, { messageStandard: 'signTypedMessage' });
                            return [4 /*yield*/, widgetCommunication.signMessage(params, this.config)];
                        case 2:
                            _a = _b.sent(), error = _a.error, result = _a.result;
                            cb(error, result);
                            return [2 /*return*/];
                    }
                });
            }); },
            signTypedMessageV3: function (msgParams, cb) { return __awaiter(_this, void 0, void 0, function () {
                var widgetCommunication, params, _a, error, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.widget];
                        case 1:
                            widgetCommunication = (_b.sent()).communication;
                            params = Object.assign({}, msgParams, { messageStandard: 'signTypedMessageV3' });
                            return [4 /*yield*/, widgetCommunication.signMessage(params, this.config)];
                        case 2:
                            _a = _b.sent(), error = _a.error, result = _a.result;
                            cb(error, result);
                            return [2 /*return*/];
                    }
                });
            }); },
            estimateGas: function (txParams, cb) { return __awaiter(_this, void 0, void 0, function () {
                var gas;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, getTxGas_1.getTxGas(query, txParams)];
                        case 1:
                            gas = _a.sent();
                            cb(null, gas);
                            return [2 /*return*/];
                    }
                });
            }); },
            getGasPrice: function (cb) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    cb(null, '');
                    return [2 /*return*/];
                });
            }); },
        }));
        if (!options.pocketDevId) {
            engine.addProvider({
                setEngine: function (_) { return _; },
                handleRequest: function (payload, next, end) { return __awaiter(_this, void 0, void 0, function () {
                    var widgetCommunication, _a, error, result;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, this.widget];
                            case 1:
                                widgetCommunication = (_b.sent()).communication;
                                return [4 /*yield*/, widgetCommunication.relay(payload, this.config)];
                            case 2:
                                _a = _b.sent(), error = _a.error, result = _a.result;
                                if (payload.method === 'net_version') {
                                    this._network = result;
                                    engine.networkVersion = this._network;
                                }
                                end(error, result);
                                return [2 /*return*/];
                        }
                    });
                }); },
            });
        }
        else {
            var pocket_1 = new pocket_js_core_1.default.Pocket({
                devID: options.pocketDevId,
                networkName: 'ETH',
                netIDs: [this.config.network.chainId],
            });
            engine.addProvider({
                setEngine: function (_) { return _; },
                handleRequest: function (payload, next, end) { return __awaiter(_this, void 0, void 0, function () {
                    var response, result, error;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, pocket_1.sendRelay(new pocket_js_core_1.default.Relay('ETH', this.config.network.chainId, JSON.stringify(payload), pocket_1.configuration))];
                            case 1:
                                response = _a.sent();
                                if (response instanceof Error || !response) {
                                    error = response || new Error('Unknown error');
                                    result = null;
                                }
                                else {
                                    try {
                                        result = JSON.parse(response).result;
                                        error = null;
                                    }
                                    catch (e) {
                                        result = null;
                                        error = e;
                                    }
                                }
                                if (payload.method === 'net_version') {
                                    this._network = result;
                                    engine.networkVersion = this._network;
                                }
                                end(error, result);
                                return [2 /*return*/];
                        }
                    });
                }); },
            });
        }
        engine.enable = function () {
            return new Promise(function (resolve, reject) {
                engine.sendAsync({ method: 'eth_accounts' }, function (error, response) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(response.result);
                    }
                });
            });
        };
        engine.isConnected = function () {
            return true;
        };
        engine.isPortis = true;
        engine.on('error', function (error) {
            if (error && error.message && error.message.includes('PollingBlockTracker')) {
                console.warn('If you see this warning constantly, there might be an error with your RPC node.');
            }
            else {
                console.error(error);
            }
        });
        engine.start();
        return engine;
    };
    Portis.prototype._setHeight = function (height) {
        return __awaiter(this, void 0, void 0, function () {
            var widgetFrame;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetFrame = (_a.sent()).widgetFrame;
                        widgetFrame.style.height = height + "px";
                        return [2 /*return*/];
                }
            });
        });
    };
    Portis.prototype._getWindowSize = function () {
        var body = document.getElementsByTagName('body')[0];
        var width = window.innerWidth || document.documentElement.clientWidth || body.clientWidth;
        var height = window.innerHeight || document.documentElement.clientHeight || body.clientHeight;
        return { width: width, height: height };
    };
    Portis.prototype._onLogin = function (walletAddress, email, reputation) {
        if (this._onLoginCallback) {
            this._onLoginCallback(walletAddress, email, reputation);
        }
    };
    Portis.prototype._onLogout = function () {
        this._selectedAddress = '';
        if (this._onLogoutCallback) {
            this._onLogoutCallback();
        }
    };
    Portis.prototype._onActiveWalletChanged = function (walletAddress) {
        if (this._onActiveWalletChangedCallback) {
            this._onActiveWalletChangedCallback(walletAddress);
        }
    };
    Portis.prototype._onError = function (error) {
        if (this._onErrorCallback) {
            this._onErrorCallback(error);
        }
    };
    Portis.prototype.clearSubprovider = function (subproviderType) {
        var subprovider = this.provider._providers.find(function (subprovider) { return subprovider instanceof subproviderType; });
        this.provider.removeProvider(subprovider);
        this.provider.addProvider(new subproviderType());
    };
    return Portis;
}());
exports.default = Portis;
//# sourceMappingURL=index.js.map