{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface INetwork {\n  nodeUrl: string;\n  chainId?: string;\n  gasRelayHubAddress?: string;\n}\n\nexport interface IConnectionMethods {\n  getAccounts: (config: ISDKConfig) => Promise<{ error: string; result: string[] }>;\n  signTransaction: (txParams: ITransactionRequest, config: ISDKConfig) => Promise<{ error: string; result: string }>;\n  signMessage: (msgParams: IMessageParams, config: ISDKConfig) => Promise<{ error: string; result: string }>;\n  relay: (payload: IPayload, config: ISDKConfig) => Promise<{ error: string; result: any }>;\n  showPortis: (config: ISDKConfig) => Promise<void>;\n  importWallet: (mnemonicOrPrivateKey: string, config: ISDKConfig) => Promise<void>;\n  getExtendedPublicKey: (path: string, coin: string, config: ISDKConfig) => Promise<{ error: string; result: string }>;\n  logout: () => Promise<{ error: string; result: boolean }>;\n  isLoggedIn: () => Promise<{ error: string; result: boolean }>;\n  signBitcoinTransaction: (\n    params: {\n      coin: string;\n      inputs: BTCSignTxInput[];\n      outputs: BTCSignTxOutput[];\n      version?: number;\n      locktime?: number;\n    },\n    config: ISDKConfig,\n  ) => Promise<{\n    error: string;\n    result: {\n      serializedTx: string;\n      txid: string;\n    };\n  }>;\n  showBitcoinWallet: (path: string, config: ISDKConfig) => Promise<void>;\n  retrieveSession: (config: ISDKConfig) => Promise<void>;\n}\n\nexport interface ISDKConfig {\n  dappId: string;\n  network: INetwork;\n  version: string;\n  defaultEmail?: string;\n  scope?: Scope[];\n  registerPageByDefault?: boolean;\n}\n\nexport type Scope = 'email';\n\nexport interface IOptions {\n  scope?: Scope[];\n  gasRelay?: boolean;\n  registerPageByDefault?: boolean;\n  pocketDevId?: string;\n  staging?: boolean;\n}\n\nexport interface ITransactionRequest {\n  to?: string;\n  from?: string;\n  nonce?: string;\n  gas?: string;\n  gasPrice?: string;\n  data?: string;\n  value?: string;\n  chainId?: number;\n}\n\nexport interface IMessageParams {\n  from: string;\n  data: string | ITypedDataMessage[];\n  messageStandard: 'signMessage' | 'signPersonalMessage' | 'signTypedMessage';\n}\n\nexport interface ITypedDataMessage {\n  name: string;\n  type: string;\n  value: string;\n}\n\nexport interface IPayload {\n  id: number;\n  jsonrpc: string;\n  method: string;\n  params: any[];\n}\n\nexport type BIP32Path = Array<number>;\n\nexport interface BTCSignTxInput {\n  addressNList: BIP32Path;\n  scriptType?: BTCInputScriptType;\n  sequence?: number;\n  amount: string;\n  vout: number;\n  txid: string;\n  tx?: BitcoinTx;\n  hex: string;\n}\n\nexport interface BTCSignTxOutput {\n  addressNList?: BIP32Path;\n  scriptType?: BTCOutputScriptType;\n  address?: string;\n  addressType: BTCOutputAddressType;\n  amount: string;\n  isChange: boolean;\n}\n\nexport interface BitcoinTx {\n  version: number;\n  locktime: number;\n  vin: Array<BitcoinInput>;\n  vout: Array<BitcoinOutput>;\n}\n\nexport interface BitcoinInput {\n  vout?: number;\n  valueSat?: number;\n  sequence?: number;\n  scriptSig?: BitcoinScriptSig;\n  txid?: string;\n  coinbase?: string;\n}\n\nexport interface BitcoinOutput {\n  value: string;\n  scriptPubKey: BitcoinScriptSig;\n}\n\nexport interface BitcoinScriptSig {\n  hex: string;\n}\n\nexport interface BTCSignTxInput {\n  addressNList: BIP32Path;\n  scriptType?: BTCInputScriptType;\n  sequence?: number;\n  amount: string;\n  vout: number;\n  txid: string;\n  tx?: BitcoinTx;\n  hex: string;\n}\n\nexport interface BTCSignTxOutput {\n  addressNList?: BIP32Path;\n  scriptType?: BTCOutputScriptType;\n  address?: string;\n  addressType: BTCOutputAddressType;\n  amount: string;\n  isChange: boolean;\n}\n\nexport type BTCInputScriptType = 'p2pkh' | 'p2sh' | 'external' | 'p2wpkh' | 'p2sh-p2wpkh';\n\nexport type BTCOutputScriptType = 'p2pkh' | 'p2sh' | 'p2wpkh' | 'p2sh-p2wpkh';\n\nexport type BTCOutputAddressType = 'spend' | 'transfer' | 'change' | 'exchange';\n"]}