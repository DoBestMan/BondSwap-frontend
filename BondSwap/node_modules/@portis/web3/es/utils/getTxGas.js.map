{"version":3,"file":"getTxGas.js","sourceRoot":"","sources":["../../src/utils/getTxGas.ts"],"names":[],"mappings":"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","sourcesContent":["import { Query } from './query';\n\nconst { addHexPrefix, stripHexPrefix, BN } = require('ethereumjs-util');\nconst SIMPLE_GAS_COST = '0x5208'; // Hex for 21000, cost of a simple send.\n\nexport async function getTxGas(query: Query, txParams) {\n  const block = await query.getBlockByNumber('latest', false);\n  const { safeGas, simpleSend, gasLimitSpecified } = await safeTxGas(query, txParams, block.gasLimit);\n\n  if (simpleSend || gasLimitSpecified) {\n    return safeGas;\n  }\n\n  try {\n    const gas = await estimateTxGas(query, txParams, block.gasLimit, safeGas);\n    return gas;\n  } catch (error) {\n    return safeGas;\n  }\n}\n\nasync function safeTxGas(query: Query, txParams, blockGasLimitHex) {\n  // check if gasLimit is already specified\n  const gasLimitSpecified = Boolean(txParams.gas);\n\n  // if it is, use that value\n  if (gasLimitSpecified) {\n    return { safeGas: txParams.gas, simpleSend: false, gasLimitSpecified: true };\n  }\n\n  const recipient = txParams.to;\n  const hasRecipient = Boolean(recipient);\n\n  // see if we can set the gas based on the recipient\n  if (hasRecipient) {\n    const code = await query.getCode(recipient);\n    // For an address with no code, geth will return '0x', and ganache-core v2.2.1 will return '0x0'\n    const codeIsEmpty = !code || code === '0x' || code === '0x0';\n\n    if (codeIsEmpty) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        const err = new Error('Trying to call a function on a non-contract address');\n        throw err;\n      }\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return { safeGas: SIMPLE_GAS_COST, simpleSend: true, gasLimitSpecified: false };\n    }\n  }\n\n  // fallback to block gasLimit\n  const blockGasLimitBN = hexToBn(blockGasLimitHex);\n  const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n  return { safeGas: bnToHex(saferGasLimitBN), simpleSend: false, gasLimitSpecified: false };\n}\n\nasync function estimateTxGas(query: Query, txParams, blockGasLimitHex, safeGas) {\n  txParams.gas = safeGas;\n  const estimatedGas = addHexPrefix(await query.estimateGas(txParams));\n  return addGasBuffer(estimatedGas, blockGasLimitHex);\n}\n\nfunction addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n  const initialGasLimitBn = hexToBn(initialGasLimitHex);\n  const blockGasLimitBn = hexToBn(blockGasLimitHex);\n  const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n  const bufferedGasLimitBn = initialGasLimitBn.muln(1.5);\n\n  // if initialGasLimit is above blockGasLimit, dont modify it\n  if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n  // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n  if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n  // otherwise use blockGasLimit\n  return bnToHex(upperGasLimitBn);\n}\n\nfunction hexToBn(inputHex) {\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nfunction bnToHex(inputBn) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  const numBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numBN).div(denomBN);\n}\n"]}