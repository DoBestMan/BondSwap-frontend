"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidKeyLength = exports.isNode = exports.isBrowser = exports.browserRandomBytes = exports.getSubtleCrypto = exports.getBrowerCrypto = exports.assert = exports.fallbackRandomBytes = exports.nodeRandomBytes = void 0;
const crypto_1 = __importDefault(require("crypto"));
const randombytes_1 = __importDefault(require("randombytes"));
const enc_utils_1 = require("enc-utils");
function nodeRandomBytes(length) {
    const buf = crypto_1.default.randomBytes(length);
    return enc_utils_1.bufferToArray(buf);
}
exports.nodeRandomBytes = nodeRandomBytes;
function fallbackRandomBytes(length) {
    return randombytes_1.default(length);
}
exports.fallbackRandomBytes = fallbackRandomBytes;
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'Assertion failed');
    }
}
exports.assert = assert;
function getBrowerCrypto() {
    return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
}
exports.getBrowerCrypto = getBrowerCrypto;
function getSubtleCrypto() {
    const browserCrypto = getBrowerCrypto();
    return browserCrypto.subtle || browserCrypto.webkitSubtle;
}
exports.getSubtleCrypto = getSubtleCrypto;
function browserRandomBytes(length) {
    const browserCrypto = getBrowerCrypto();
    if (typeof browserCrypto.getRandomValues !== 'undefined') {
        return browserCrypto.getRandomValues(new Uint8Array(length));
    }
    return fallbackRandomBytes(length);
}
exports.browserRandomBytes = browserRandomBytes;
function isBrowser() {
    return !!getBrowerCrypto() && !!getSubtleCrypto();
}
exports.isBrowser = isBrowser;
function isNode() {
    return (typeof process !== 'undefined' &&
        typeof process.versions !== 'undefined' &&
        typeof process.versions.node !== 'undefined');
}
exports.isNode = isNode;
function isValidKeyLength(length) {
    return !(length <= 0 || length > 1024 || parseInt(String(length)) !== length);
}
exports.isValidKeyLength = isValidKeyLength;
//# sourceMappingURL=index.js.map