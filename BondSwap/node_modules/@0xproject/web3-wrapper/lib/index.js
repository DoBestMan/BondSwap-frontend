"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0xproject/utils");
var _ = require("lodash");
var Web3 = require("web3");
var Web3Wrapper = /** @class */ (function () {
    function Web3Wrapper(provider, defaults) {
        if (_.isUndefined(provider.sendAsync)) {
            // Web3@1.0 provider doesn't support synchronous http requests,
            // so it only has an async `send` method, instead of a `send` and `sendAsync` in web3@0.x.x`
            // We re-assign the send method so that Web3@1.0 providers work with 0x.js
            provider.sendAsync = provider.send;
        }
        this._web3 = new Web3();
        this._web3.setProvider(provider);
        this._defaults = defaults || {};
        this._jsonRpcRequestId = 0;
    }
    Web3Wrapper.prototype.getContractDefaults = function () {
        return this._defaults;
    };
    Web3Wrapper.prototype.setProvider = function (provider) {
        this._web3.setProvider(provider);
    };
    Web3Wrapper.prototype.isAddress = function (address) {
        return this._web3.isAddress(address);
    };
    Web3Wrapper.prototype.isSenderAddressAvailableAsync = function (senderAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var addresses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAvailableAddressesAsync()];
                    case 1:
                        addresses = _a.sent();
                        return [2 /*return*/, _.includes(addresses, senderAddress)];
                }
            });
        });
    };
    Web3Wrapper.prototype.getNodeVersionAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var nodeVersion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.version.getNode)()];
                    case 1:
                        nodeVersion = _a.sent();
                        return [2 /*return*/, nodeVersion];
                }
            });
        });
    };
    Web3Wrapper.prototype.getNetworkIdAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var networkIdStr, networkId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.version.getNetwork)()];
                    case 1:
                        networkIdStr = _a.sent();
                        networkId = _.parseInt(networkIdStr);
                        return [2 /*return*/, networkId];
                }
            });
        });
    };
    Web3Wrapper.prototype.getTransactionReceiptAsync = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            var transactionReceipt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.getTransactionReceipt)(txHash)];
                    case 1:
                        transactionReceipt = _a.sent();
                        if (!_.isNull(transactionReceipt)) {
                            transactionReceipt.status = this._normalizeTxReceiptStatus(transactionReceipt.status);
                        }
                        return [2 /*return*/, transactionReceipt];
                }
            });
        });
    };
    Web3Wrapper.prototype.getCurrentProvider = function () {
        return this._web3.currentProvider;
    };
    Web3Wrapper.prototype.toWei = function (ethAmount) {
        var balanceWei = this._web3.toWei(ethAmount, 'ether');
        return balanceWei;
    };
    Web3Wrapper.prototype.getBalanceInWeiAsync = function (owner) {
        return __awaiter(this, void 0, void 0, function () {
            var balanceInWei;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.getBalance)(owner)];
                    case 1:
                        balanceInWei = _a.sent();
                        // Rewrap in a new BigNumber
                        balanceInWei = new utils_1.BigNumber(balanceInWei);
                        return [2 /*return*/, balanceInWei];
                }
            });
        });
    };
    Web3Wrapper.prototype.doesContractExistAtAddressAsync = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var code, codeIsEmpty;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.getCode)(address)];
                    case 1:
                        code = _a.sent();
                        codeIsEmpty = /^0x0{0,40}$/i.test(code);
                        return [2 /*return*/, !codeIsEmpty];
                }
            });
        });
    };
    Web3Wrapper.prototype.signTransactionAsync = function (address, message) {
        return __awaiter(this, void 0, void 0, function () {
            var signData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.sign)(address, message)];
                    case 1:
                        signData = _a.sent();
                        return [2 /*return*/, signData];
                }
            });
        });
    };
    Web3Wrapper.prototype.getBlockNumberAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var blockNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.getBlockNumber)()];
                    case 1:
                        blockNumber = _a.sent();
                        return [2 /*return*/, blockNumber];
                }
            });
        });
    };
    Web3Wrapper.prototype.getBlockAsync = function (blockParam) {
        return __awaiter(this, void 0, void 0, function () {
            var block;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.getBlock)(blockParam)];
                    case 1:
                        block = _a.sent();
                        return [2 /*return*/, block];
                }
            });
        });
    };
    Web3Wrapper.prototype.getBlockTimestampAsync = function (blockParam) {
        return __awaiter(this, void 0, void 0, function () {
            var timestamp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBlockAsync(blockParam)];
                    case 1:
                        timestamp = (_a.sent()).timestamp;
                        return [2 /*return*/, timestamp];
                }
            });
        });
    };
    Web3Wrapper.prototype.getAvailableAddressesAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var addresses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.getAccounts)()];
                    case 1:
                        addresses = _a.sent();
                        return [2 /*return*/, addresses];
                }
            });
        });
    };
    Web3Wrapper.prototype.getLogsAsync = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlock, toBlock, serializedFilter, payload, rawLogs, formattedLogs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fromBlock = filter.fromBlock;
                        if (_.isNumber(fromBlock)) {
                            fromBlock = this._web3.toHex(fromBlock);
                        }
                        toBlock = filter.toBlock;
                        if (_.isNumber(toBlock)) {
                            toBlock = this._web3.toHex(toBlock);
                        }
                        serializedFilter = __assign({}, filter, { fromBlock: fromBlock,
                            toBlock: toBlock });
                        payload = {
                            jsonrpc: '2.0',
                            id: this._jsonRpcRequestId++,
                            method: 'eth_getLogs',
                            params: [serializedFilter],
                        };
                        return [4 /*yield*/, this._sendRawPayloadAsync(payload)];
                    case 1:
                        rawLogs = _a.sent();
                        formattedLogs = _.map(rawLogs, this._formatLog.bind(this));
                        return [2 /*return*/, formattedLogs];
                }
            });
        });
    };
    Web3Wrapper.prototype.getContractFromAbi = function (abi) {
        var web3Contract = this._web3.eth.contract(abi);
        return web3Contract;
    };
    Web3Wrapper.prototype.getContractInstance = function (abi, address) {
        var web3ContractInstance = this.getContractFromAbi(abi).at(address);
        return web3ContractInstance;
    };
    Web3Wrapper.prototype.estimateGasAsync = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var gas;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.estimateGas)({ data: data })];
                    case 1:
                        gas = _a.sent();
                        return [2 /*return*/, gas];
                }
            });
        });
    };
    Web3Wrapper.prototype.sendTransactionAsync = function (txData) {
        return __awaiter(this, void 0, void 0, function () {
            var txHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.promisify(this._web3.eth.sendTransaction)(txData)];
                    case 1:
                        txHash = _a.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    Web3Wrapper.prototype._sendRawPayloadAsync = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var sendAsync, response, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sendAsync = this._web3.currentProvider.sendAsync.bind(this._web3.currentProvider);
                        return [4 /*yield*/, utils_1.promisify(sendAsync)(payload)];
                    case 1:
                        response = _a.sent();
                        result = response.result;
                        return [2 /*return*/, result];
                }
            });
        });
    };
    Web3Wrapper.prototype._normalizeTxReceiptStatus = function (status) {
        // Transaction status might have four values
        // undefined - Testrpc and other old clients
        // null - New clients on old transactions
        // number - Parity
        // hex - Geth
        if (_.isString(status)) {
            return this._web3.toDecimal(status);
        }
        else if (_.isUndefined(status)) {
            return null;
        }
        else {
            return status;
        }
    };
    Web3Wrapper.prototype._formatLog = function (rawLog) {
        var formattedLog = __assign({}, rawLog, { logIndex: this._hexToDecimal(rawLog.logIndex), blockNumber: this._hexToDecimal(rawLog.blockNumber), transactionIndex: this._hexToDecimal(rawLog.transactionIndex) });
        return formattedLog;
    };
    Web3Wrapper.prototype._hexToDecimal = function (hex) {
        if (_.isNull(hex)) {
            return null;
        }
        var decimal = this._web3.toDecimal(hex);
        return decimal;
    };
    return Web3Wrapper;
}());
exports.Web3Wrapper = Web3Wrapper;
//# sourceMappingURL=index.js.map