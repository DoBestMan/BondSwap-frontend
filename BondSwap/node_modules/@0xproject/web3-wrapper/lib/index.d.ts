import { TransactionReceipt, TxData } from '@0xproject/types';
import { BigNumber } from '@0xproject/utils';
import * as Web3 from 'web3';
export declare class Web3Wrapper {
    private _web3;
    private _defaults;
    private _jsonRpcRequestId;
    constructor(provider: Web3.Provider, defaults?: Partial<TxData>);
    getContractDefaults(): Partial<TxData>;
    setProvider(provider: Web3.Provider): void;
    isAddress(address: string): boolean;
    isSenderAddressAvailableAsync(senderAddress: string): Promise<boolean>;
    getNodeVersionAsync(): Promise<string>;
    getNetworkIdAsync(): Promise<number>;
    getTransactionReceiptAsync(txHash: string): Promise<TransactionReceipt>;
    getCurrentProvider(): Web3.Provider;
    toWei(ethAmount: BigNumber): BigNumber;
    getBalanceInWeiAsync(owner: string): Promise<BigNumber>;
    doesContractExistAtAddressAsync(address: string): Promise<boolean>;
    signTransactionAsync(address: string, message: string): Promise<string>;
    getBlockNumberAsync(): Promise<number>;
    getBlockAsync(blockParam: string | Web3.BlockParam): Promise<Web3.BlockWithoutTransactionData>;
    getBlockTimestampAsync(blockParam: string | Web3.BlockParam): Promise<number>;
    getAvailableAddressesAsync(): Promise<string[]>;
    getLogsAsync(filter: Web3.FilterObject): Promise<Web3.LogEntry[]>;
    getContractFromAbi(abi: Web3.ContractAbi): Web3.Contract<any>;
    getContractInstance(abi: Web3.ContractAbi, address: string): Web3.ContractInstance;
    estimateGasAsync(data: string): Promise<number>;
    sendTransactionAsync(txData: Web3.TxData): Promise<string>;
    private _sendRawPayloadAsync<A>(payload);
    private _normalizeTxReceiptStatus(status);
    private _formatLog(rawLog);
    private _hexToDecimal(hex);
}
