'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ProviderSubprovider = require('./json-rpc-engine-middleware');
var createFetchMiddleware = require('eth-json-rpc-middleware/fetch');

var FetchSubprovider = function (_ProviderSubprovider) {
  _inherits(FetchSubprovider, _ProviderSubprovider);

  function FetchSubprovider(opts) {
    _classCallCheck(this, FetchSubprovider);

    return _possibleConstructorReturn(this, (FetchSubprovider.__proto__ || Object.getPrototypeOf(FetchSubprovider)).call(this, function (_ref) {
      var blockTracker = _ref.blockTracker,
          provider = _ref.provider,
          engine = _ref.engine;

      return createFetchMiddleware(opts);
    }));
  }

  return FetchSubprovider;
}(ProviderSubprovider);

module.exports = FetchSubprovider;